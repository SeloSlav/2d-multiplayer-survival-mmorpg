// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { TimeOfDay as __TimeOfDay } from "./time_of_day_type";
import { Season as __Season } from "./season_type";
import { WeatherType as __WeatherType } from "./weather_type_type";

export type WorldState = {
  id: number,
  cycleProgress: number,
  timeOfDay: __TimeOfDay,
  cycleCount: number,
  isFullMoon: boolean,
  lastTick: Timestamp,
  currentSeason: __Season,
  dayOfYear: number,
  year: number,
  currentWeather: __WeatherType,
  rainIntensity: number,
  weatherStartTime: Timestamp | undefined,
  weatherDuration: number | undefined,
  lastRainEndTime: Timestamp | undefined,
  lastThunderTime: Timestamp | undefined,
  nextThunderTime: Timestamp | undefined,
};

/**
 * A namespace for generated helper functions.
 */
export namespace WorldState {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU32Type()),
      new ProductTypeElement("cycleProgress", AlgebraicType.createF32Type()),
      new ProductTypeElement("timeOfDay", __TimeOfDay.getTypeScriptAlgebraicType()),
      new ProductTypeElement("cycleCount", AlgebraicType.createU32Type()),
      new ProductTypeElement("isFullMoon", AlgebraicType.createBoolType()),
      new ProductTypeElement("lastTick", AlgebraicType.createTimestampType()),
      new ProductTypeElement("currentSeason", __Season.getTypeScriptAlgebraicType()),
      new ProductTypeElement("dayOfYear", AlgebraicType.createU32Type()),
      new ProductTypeElement("year", AlgebraicType.createU32Type()),
      new ProductTypeElement("currentWeather", __WeatherType.getTypeScriptAlgebraicType()),
      new ProductTypeElement("rainIntensity", AlgebraicType.createF32Type()),
      new ProductTypeElement("weatherStartTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("weatherDuration", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("lastRainEndTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("lastThunderTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("nextThunderTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: WorldState): void {
    WorldState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): WorldState {
    return WorldState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


