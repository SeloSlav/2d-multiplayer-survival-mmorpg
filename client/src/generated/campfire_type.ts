
// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

export type Campfire = {
  id: number,
  posX: number,
  posY: number,
  chunkIndex: number,
  placedBy: Identity,
  placedAt: Timestamp,
  isBurning: boolean,
  fuelInstanceId0: bigint | undefined,
  fuelDefId0: bigint | undefined,
  fuelInstanceId1: bigint | undefined,
  fuelDefId1: bigint | undefined,
  fuelInstanceId2: bigint | undefined,
  fuelDefId2: bigint | undefined,
  fuelInstanceId3: bigint | undefined,
  fuelDefId3: bigint | undefined,
  fuelInstanceId4: bigint | undefined,
  fuelDefId4: bigint | undefined,
  nextFuelConsumeAt: Timestamp | undefined,
};

/**
 * A namespace for generated helper functions.
 */
export namespace Campfire {
  /**
   * A function which returns this type represented as an AlgebraicType.
   * This function is derived from the AlgebraicType used to generate this type.
   */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU32Type()),
      new ProductTypeElement("posX", AlgebraicType.createF32Type()),
      new ProductTypeElement("posY", AlgebraicType.createF32Type()),
      new ProductTypeElement("chunkIndex", AlgebraicType.createU32Type()),
      new ProductTypeElement("placedBy", AlgebraicType.createIdentityType()),
      new ProductTypeElement("placedAt", AlgebraicType.createTimestampType()),
      new ProductTypeElement("isBurning", AlgebraicType.createBoolType()),
      new ProductTypeElement("fuelInstanceId0", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId0", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId1", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId1", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId2", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId2", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId3", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId3", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelInstanceId4", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("fuelDefId4", AlgebraicType.createOptionType(AlgebraicType.createU64Type())),
      new ProductTypeElement("nextFuelConsumeAt", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: Campfire): void {
    Campfire.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): Campfire {
    return Campfire.getTypeScriptAlgebraicType().deserialize(reader);
  }

  // --- New Helper Functions ---

  /**
   * Represents a single fuel slot with an instance ID and definition ID.
   */
  export type FuelSlot = {
    instanceId: bigint | undefined;
    defId: bigint | undefined;
  };

  /**
   * Returns an array of all fuel slots in the campfire.
   * Useful for iterating over or processing all slots collectively.
   */
  export function getFuelSlots(campfire: Campfire): FuelSlot[] {
    return [
      { instanceId: campfire.fuelInstanceId0, defId: campfire.fuelDefId0 },
      { instanceId: campfire.fuelInstanceId1, defId: campfire.fuelDefId1 },
      { instanceId: campfire.fuelInstanceId2, defId: campfire.fuelDefId2 },
      { instanceId: campfire.fuelInstanceId3, defId: campfire.fuelDefId3 },
      { instanceId: campfire.fuelInstanceId4, defId: campfire.fuelDefId4 },
    ];
  }

  /**
   * Iterates over each fuel slot, calling the provided callback with the instance ID, definition ID, and index.
   * More efficient than `getFuelSlots` when only iteration is needed, as it avoids array creation.
   */
  export function forEachFuelSlot(
    campfire: Campfire,
    callback: (instanceId: bigint | undefined, defId: bigint | undefined, index: number) => void
  ): void {
    callback(campfire.fuelInstanceId0, campfire.fuelDefId0, 0);
    callback(campfire.fuelInstanceId1, campfire.fuelDefId1, 1);
    callback(campfire.fuelInstanceId2, campfire.fuelDefId2, 2);
    callback(campfire.fuelInstanceId3, campfire.fuelDefId3, 3);
    callback(campfire.fuelInstanceId4, campfire.fuelDefId4, 4);
  }

  /**
   * Retrieves a specific fuel slot by its index (0-4).
   * Returns undefined if the index is out of range.
   */
  export function getFuelSlot(campfire: Campfire, index: number): FuelSlot | undefined {
    switch (index) {
      case 0: return { instanceId: campfire.fuelInstanceId0, defId: campfire.fuelDefId0 };
      case 1: return { instanceId: campfire.fuelInstanceId1, defId: campfire.fuelDefId1 };
      case 2: return { instanceId: campfire.fuelInstanceId2, defId: campfire.fuelDefId2 };
      case 3: return { instanceId: campfire.fuelInstanceId3, defId: campfire.fuelDefId3 };
      case 4: return { instanceId: campfire.fuelInstanceId4, defId: campfire.fuelDefId4 };
      default: return undefined;
    }
  }

  /**
   * Checks if a fuel slot is occupied, meaning both instanceId and defId are defined.
   * Adjust this logic based on your game's specific requirements if needed.
   */
  export function isFuelSlotOccupied(slot: FuelSlot): boolean {
    return slot.instanceId !== undefined && slot.defId !== undefined;
  }
}
