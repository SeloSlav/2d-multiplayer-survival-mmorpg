// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace SoundType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type TreeChop = { tag: "TreeChop" };
  export type TreeCreaking = { tag: "TreeCreaking" };
  export type TreeFalling = { tag: "TreeFalling" };
  export type StoneHit = { tag: "StoneHit" };
  export type StoneDestroyed = { tag: "StoneDestroyed" };
  export type HarvestPlant = { tag: "HarvestPlant" };
  export type PlantSeed = { tag: "PlantSeed" };
  export type PickupItem = { tag: "PickupItem" };
  export type CampfireLooping = { tag: "CampfireLooping" };
  export type LanternLooping = { tag: "LanternLooping" };
  export type Repair = { tag: "Repair" };
  export type RepairFail = { tag: "RepairFail" };
  export type HeavyStormRain = { tag: "HeavyStormRain" };
  export type NormalRain = { tag: "NormalRain" };
  export type DrinkingWater = { tag: "DrinkingWater" };
  export type ThrowingUp = { tag: "ThrowingUp" };
  export type EatingFood = { tag: "EatingFood" };
  export type WateringCrops = { tag: "WateringCrops" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const TreeChop = { tag: "TreeChop" };
  export const TreeCreaking = { tag: "TreeCreaking" };
  export const TreeFalling = { tag: "TreeFalling" };
  export const StoneHit = { tag: "StoneHit" };
  export const StoneDestroyed = { tag: "StoneDestroyed" };
  export const HarvestPlant = { tag: "HarvestPlant" };
  export const PlantSeed = { tag: "PlantSeed" };
  export const PickupItem = { tag: "PickupItem" };
  export const CampfireLooping = { tag: "CampfireLooping" };
  export const LanternLooping = { tag: "LanternLooping" };
  export const Repair = { tag: "Repair" };
  export const RepairFail = { tag: "RepairFail" };
  export const HeavyStormRain = { tag: "HeavyStormRain" };
  export const NormalRain = { tag: "NormalRain" };
  export const DrinkingWater = { tag: "DrinkingWater" };
  export const ThrowingUp = { tag: "ThrowingUp" };
  export const EatingFood = { tag: "EatingFood" };
  export const WateringCrops = { tag: "WateringCrops" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("TreeChop", AlgebraicType.createProductType([])),
      new SumTypeVariant("TreeCreaking", AlgebraicType.createProductType([])),
      new SumTypeVariant("TreeFalling", AlgebraicType.createProductType([])),
      new SumTypeVariant("StoneHit", AlgebraicType.createProductType([])),
      new SumTypeVariant("StoneDestroyed", AlgebraicType.createProductType([])),
      new SumTypeVariant("HarvestPlant", AlgebraicType.createProductType([])),
      new SumTypeVariant("PlantSeed", AlgebraicType.createProductType([])),
      new SumTypeVariant("PickupItem", AlgebraicType.createProductType([])),
      new SumTypeVariant("CampfireLooping", AlgebraicType.createProductType([])),
      new SumTypeVariant("LanternLooping", AlgebraicType.createProductType([])),
      new SumTypeVariant("Repair", AlgebraicType.createProductType([])),
      new SumTypeVariant("RepairFail", AlgebraicType.createProductType([])),
      new SumTypeVariant("HeavyStormRain", AlgebraicType.createProductType([])),
      new SumTypeVariant("NormalRain", AlgebraicType.createProductType([])),
      new SumTypeVariant("DrinkingWater", AlgebraicType.createProductType([])),
      new SumTypeVariant("ThrowingUp", AlgebraicType.createProductType([])),
      new SumTypeVariant("EatingFood", AlgebraicType.createProductType([])),
      new SumTypeVariant("WateringCrops", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: SoundType): void {
      SoundType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): SoundType {
      return SoundType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `SoundType`.
export type SoundType = SoundType.TreeChop | SoundType.TreeCreaking | SoundType.TreeFalling | SoundType.StoneHit | SoundType.StoneDestroyed | SoundType.HarvestPlant | SoundType.PlantSeed | SoundType.PickupItem | SoundType.CampfireLooping | SoundType.LanternLooping | SoundType.Repair | SoundType.RepairFail | SoundType.HeavyStormRain | SoundType.NormalRain | SoundType.DrinkingWater | SoundType.ThrowingUp | SoundType.EatingFood | SoundType.WateringCrops;

export default SoundType;

