// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { AddFuelToCampfire } from "./add_fuel_to_campfire_reducer.ts";
export { AddFuelToCampfire };
import { AutoRemoveFuelFromCampfire } from "./auto_remove_fuel_from_campfire_reducer.ts";
export { AutoRemoveFuelFromCampfire };
import { CancelAllCrafting } from "./cancel_all_crafting_reducer.ts";
export { CancelAllCrafting };
import { CancelCraftingItem } from "./cancel_crafting_item_reducer.ts";
export { CancelCraftingItem };
import { CancelFishing } from "./cancel_fishing_reducer.ts";
export { CancelFishing };
import { CastFishingLine } from "./cast_fishing_line_reducer.ts";
export { CastFishingLine };
import { CheckFinishedCrafting } from "./check_finished_crafting_reducer.ts";
export { CheckFinishedCrafting };
import { CheckResourceRespawns } from "./check_resource_respawns_reducer.ts";
export { CheckResourceRespawns };
import { ClearActiveItemReducer } from "./clear_active_item_reducer_reducer.ts";
export { ClearActiveItemReducer };
import { ConsumeItem } from "./consume_item_reducer.ts";
export { ConsumeItem };
import { CrushBoneItem } from "./crush_bone_item_reducer.ts";
export { CrushBoneItem };
import { DespawnExpiredItems } from "./despawn_expired_items_reducer.ts";
export { DespawnExpiredItems };
import { DodgeRoll } from "./dodge_roll_reducer.ts";
export { DodgeRoll };
import { DropItem } from "./drop_item_reducer.ts";
export { DropItem };
import { DropItemFromBoxSlotToWorld } from "./drop_item_from_box_slot_to_world_reducer.ts";
export { DropItemFromBoxSlotToWorld };
import { DropItemFromCampfireSlotToWorld } from "./drop_item_from_campfire_slot_to_world_reducer.ts";
export { DropItemFromCampfireSlotToWorld };
import { DropItemFromCorpseSlotToWorld } from "./drop_item_from_corpse_slot_to_world_reducer.ts";
export { DropItemFromCorpseSlotToWorld };
import { DropItemFromStashSlotToWorld } from "./drop_item_from_stash_slot_to_world_reducer.ts";
export { DropItemFromStashSlotToWorld };
import { EquipArmor } from "./equip_armor_reducer.ts";
export { EquipArmor };
import { EquipArmorFromDrag } from "./equip_armor_from_drag_reducer.ts";
export { EquipArmorFromDrag };
import { EquipArmorFromInventory } from "./equip_armor_from_inventory_reducer.ts";
export { EquipArmorFromInventory };
import { FinishFishing } from "./finish_fishing_reducer.ts";
export { FinishFishing };
import { FireProjectile } from "./fire_projectile_reducer.ts";
export { FireProjectile };
import { GenerateDefaultWorld } from "./generate_default_world_reducer.ts";
export { GenerateDefaultWorld };
import { GenerateMinimapData } from "./generate_minimap_data_reducer.ts";
export { GenerateMinimapData };
import { GenerateWorld } from "./generate_world_reducer.ts";
export { GenerateWorld };
import { GetKnockedOutStatus } from "./get_knocked_out_status_reducer.ts";
export { GetKnockedOutStatus };
import { GetMinimapData } from "./get_minimap_data_reducer.ts";
export { GetMinimapData };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { InitProjectileSystem } from "./init_projectile_system_reducer.ts";
export { InitProjectileSystem };
import { InteractWithCampfire } from "./interact_with_campfire_reducer.ts";
export { InteractWithCampfire };
import { InteractWithCorn } from "./interact_with_corn_reducer.ts";
export { InteractWithCorn };
import { InteractWithHemp } from "./interact_with_hemp_reducer.ts";
export { InteractWithHemp };
import { InteractWithMushroom } from "./interact_with_mushroom_reducer.ts";
export { InteractWithMushroom };
import { InteractWithPotato } from "./interact_with_potato_reducer.ts";
export { InteractWithPotato };
import { InteractWithPumpkin } from "./interact_with_pumpkin_reducer.ts";
export { InteractWithPumpkin };
import { InteractWithSleepingBag } from "./interact_with_sleeping_bag_reducer.ts";
export { InteractWithSleepingBag };
import { InteractWithStorageBox } from "./interact_with_storage_box_reducer.ts";
export { InteractWithStorageBox };
import { Jump } from "./jump_reducer.ts";
export { Jump };
import { LoadRangedWeapon } from "./load_ranged_weapon_reducer.ts";
export { LoadRangedWeapon };
import { MoveFuelItemToPlayerSlot } from "./move_fuel_item_to_player_slot_reducer.ts";
export { MoveFuelItemToPlayerSlot };
import { MoveFuelWithinCampfire } from "./move_fuel_within_campfire_reducer.ts";
export { MoveFuelWithinCampfire };
import { MoveItemFromBox } from "./move_item_from_box_reducer.ts";
export { MoveItemFromBox };
import { MoveItemFromCorpse } from "./move_item_from_corpse_reducer.ts";
export { MoveItemFromCorpse };
import { MoveItemFromStash } from "./move_item_from_stash_reducer.ts";
export { MoveItemFromStash };
import { MoveItemToBox } from "./move_item_to_box_reducer.ts";
export { MoveItemToBox };
import { MoveItemToCorpse } from "./move_item_to_corpse_reducer.ts";
export { MoveItemToCorpse };
import { MoveItemToHotbar } from "./move_item_to_hotbar_reducer.ts";
export { MoveItemToHotbar };
import { MoveItemToInventory } from "./move_item_to_inventory_reducer.ts";
export { MoveItemToInventory };
import { MoveItemToStash } from "./move_item_to_stash_reducer.ts";
export { MoveItemToStash };
import { MoveItemWithinBox } from "./move_item_within_box_reducer.ts";
export { MoveItemWithinBox };
import { MoveItemWithinCorpse } from "./move_item_within_corpse_reducer.ts";
export { MoveItemWithinCorpse };
import { MoveItemWithinStash } from "./move_item_within_stash_reducer.ts";
export { MoveItemWithinStash };
import { MoveToFirstAvailableHotbarSlot } from "./move_to_first_available_hotbar_slot_reducer.ts";
export { MoveToFirstAvailableHotbarSlot };
import { PickupDroppedItem } from "./pickup_dropped_item_reducer.ts";
export { PickupDroppedItem };
import { PickupStorageBox } from "./pickup_storage_box_reducer.ts";
export { PickupStorageBox };
import { PlaceCampfire } from "./place_campfire_reducer.ts";
export { PlaceCampfire };
import { PlaceShelter } from "./place_shelter_reducer.ts";
export { PlaceShelter };
import { PlaceSleepingBag } from "./place_sleeping_bag_reducer.ts";
export { PlaceSleepingBag };
import { PlaceStash } from "./place_stash_reducer.ts";
export { PlaceStash };
import { PlaceWoodenStorageBox } from "./place_wooden_storage_box_reducer.ts";
export { PlaceWoodenStorageBox };
import { ProcessActiveConsumableEffectsTick } from "./process_active_consumable_effects_tick_reducer.ts";
export { ProcessActiveConsumableEffectsTick };
import { ProcessCampfireLogicScheduled } from "./process_campfire_logic_scheduled_reducer.ts";
export { ProcessCampfireLogicScheduled };
import { ProcessCorpseDespawn } from "./process_corpse_despawn_reducer.ts";
export { ProcessCorpseDespawn };
import { ProcessGlobalTick } from "./process_global_tick_reducer.ts";
export { ProcessGlobalTick };
import { ProcessGrassRespawn } from "./process_grass_respawn_reducer.ts";
export { ProcessGrassRespawn };
import { ProcessKnockedOutRecovery } from "./process_knocked_out_recovery_reducer.ts";
export { ProcessKnockedOutRecovery };
import { ProcessPlayerStats } from "./process_player_stats_reducer.ts";
export { ProcessPlayerStats };
import { QuickMoveFromBox } from "./quick_move_from_box_reducer.ts";
export { QuickMoveFromBox };
import { QuickMoveFromCorpse } from "./quick_move_from_corpse_reducer.ts";
export { QuickMoveFromCorpse };
import { QuickMoveFromStash } from "./quick_move_from_stash_reducer.ts";
export { QuickMoveFromStash };
import { QuickMoveToBox } from "./quick_move_to_box_reducer.ts";
export { QuickMoveToBox };
import { QuickMoveToCampfire } from "./quick_move_to_campfire_reducer.ts";
export { QuickMoveToCampfire };
import { QuickMoveToCorpse } from "./quick_move_to_corpse_reducer.ts";
export { QuickMoveToCorpse };
import { QuickMoveToStash } from "./quick_move_to_stash_reducer.ts";
export { QuickMoveToStash };
import { RegenerateCompressedChunks } from "./regenerate_compressed_chunks_reducer.ts";
export { RegenerateCompressedChunks };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { RespawnAtSleepingBag } from "./respawn_at_sleeping_bag_reducer.ts";
export { RespawnAtSleepingBag };
import { RespawnRandomly } from "./respawn_randomly_reducer.ts";
export { RespawnRandomly };
import { ReviveKnockedOutPlayer } from "./revive_knocked_out_player_reducer.ts";
export { ReviveKnockedOutPlayer };
import { ScheduleNextCampfireProcessing } from "./schedule_next_campfire_processing_reducer.ts";
export { ScheduleNextCampfireProcessing };
import { SeedEnvironment } from "./seed_environment_reducer.ts";
export { SeedEnvironment };
import { SeedItems } from "./seed_items_reducer.ts";
export { SeedItems };
import { SeedRangedWeaponStats } from "./seed_ranged_weapon_stats_reducer.ts";
export { SeedRangedWeaponStats };
import { SeedRecipes } from "./seed_recipes_reducer.ts";
export { SeedRecipes };
import { SeedWorldState } from "./seed_world_state_reducer.ts";
export { SeedWorldState };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetActiveItemReducer } from "./set_active_item_reducer_reducer.ts";
export { SetActiveItemReducer };
import { SetPlayerPin } from "./set_player_pin_reducer.ts";
export { SetPlayerPin };
import { SetSprinting } from "./set_sprinting_reducer.ts";
export { SetSprinting };
import { SplitAndDropItemFromBoxSlotToWorld } from "./split_and_drop_item_from_box_slot_to_world_reducer.ts";
export { SplitAndDropItemFromBoxSlotToWorld };
import { SplitAndDropItemFromCampfireSlotToWorld } from "./split_and_drop_item_from_campfire_slot_to_world_reducer.ts";
export { SplitAndDropItemFromCampfireSlotToWorld };
import { SplitAndDropItemFromCorpseSlotToWorld } from "./split_and_drop_item_from_corpse_slot_to_world_reducer.ts";
export { SplitAndDropItemFromCorpseSlotToWorld };
import { SplitAndDropItemFromStashSlotToWorld } from "./split_and_drop_item_from_stash_slot_to_world_reducer.ts";
export { SplitAndDropItemFromStashSlotToWorld };
import { SplitAndMoveFromCampfire } from "./split_and_move_from_campfire_reducer.ts";
export { SplitAndMoveFromCampfire };
import { SplitStack } from "./split_stack_reducer.ts";
export { SplitStack };
import { SplitStackFromBox } from "./split_stack_from_box_reducer.ts";
export { SplitStackFromBox };
import { SplitStackFromCampfire } from "./split_stack_from_campfire_reducer.ts";
export { SplitStackFromCampfire };
import { SplitStackFromCorpse } from "./split_stack_from_corpse_reducer.ts";
export { SplitStackFromCorpse };
import { SplitStackFromStash } from "./split_stack_from_stash_reducer.ts";
export { SplitStackFromStash };
import { SplitStackIntoBox } from "./split_stack_into_box_reducer.ts";
export { SplitStackIntoBox };
import { SplitStackIntoCampfire } from "./split_stack_into_campfire_reducer.ts";
export { SplitStackIntoCampfire };
import { SplitStackIntoCorpse } from "./split_stack_into_corpse_reducer.ts";
export { SplitStackIntoCorpse };
import { SplitStackIntoStash } from "./split_stack_into_stash_reducer.ts";
export { SplitStackIntoStash };
import { SplitStackWithinBox } from "./split_stack_within_box_reducer.ts";
export { SplitStackWithinBox };
import { SplitStackWithinCampfire } from "./split_stack_within_campfire_reducer.ts";
export { SplitStackWithinCampfire };
import { SplitStackWithinCorpse } from "./split_stack_within_corpse_reducer.ts";
export { SplitStackWithinCorpse };
import { SplitStackWithinStash } from "./split_stack_within_stash_reducer.ts";
export { SplitStackWithinStash };
import { StartCrafting } from "./start_crafting_reducer.ts";
export { StartCrafting };
import { StartCraftingMultiple } from "./start_crafting_multiple_reducer.ts";
export { StartCraftingMultiple };
import { ThrowItem } from "./throw_item_reducer.ts";
export { ThrowItem };
import { TickWorldState } from "./tick_world_state_reducer.ts";
export { TickWorldState };
import { ToggleCampfireBurning } from "./toggle_campfire_burning_reducer.ts";
export { ToggleCampfireBurning };
import { ToggleCrouch } from "./toggle_crouch_reducer.ts";
export { ToggleCrouch };
import { ToggleStashVisibility } from "./toggle_stash_visibility_reducer.ts";
export { ToggleStashVisibility };
import { ToggleTorch } from "./toggle_torch_reducer.ts";
export { ToggleTorch };
import { UpdateCloudPositions } from "./update_cloud_positions_reducer.ts";
export { UpdateCloudPositions };
import { UpdatePlayerFacingDirection } from "./update_player_facing_direction_reducer.ts";
export { UpdatePlayerFacingDirection };
import { UpdatePlayerPositionSimple } from "./update_player_position_simple_reducer.ts";
export { UpdatePlayerPositionSimple };
import { UpdateProjectiles } from "./update_projectiles_reducer.ts";
export { UpdateProjectiles };
import { UpdateViewport } from "./update_viewport_reducer.ts";
export { UpdateViewport };
import { UseEquippedItem } from "./use_equipped_item_reducer.ts";
export { UseEquippedItem };

// Import and reexport all table handle types
import { ActiveConnectionTableHandle } from "./active_connection_table.ts";
export { ActiveConnectionTableHandle };
import { ActiveConsumableEffectTableHandle } from "./active_consumable_effect_table.ts";
export { ActiveConsumableEffectTableHandle };
import { ActiveEquipmentTableHandle } from "./active_equipment_table.ts";
export { ActiveEquipmentTableHandle };
import { ArrowBreakEventTableHandle } from "./arrow_break_event_table.ts";
export { ArrowBreakEventTableHandle };
import { CampfireTableHandle } from "./campfire_table.ts";
export { CampfireTableHandle };
import { CampfireProcessingScheduleTableHandle } from "./campfire_processing_schedule_table.ts";
export { CampfireProcessingScheduleTableHandle };
import { ClientViewportTableHandle } from "./client_viewport_table.ts";
export { ClientViewportTableHandle };
import { CloudTableHandle } from "./cloud_table.ts";
export { CloudTableHandle };
import { CloudUpdateScheduleTableHandle } from "./cloud_update_schedule_table.ts";
export { CloudUpdateScheduleTableHandle };
import { CornTableHandle } from "./corn_table.ts";
export { CornTableHandle };
import { CraftingFinishScheduleTableHandle } from "./crafting_finish_schedule_table.ts";
export { CraftingFinishScheduleTableHandle };
import { CraftingQueueItemTableHandle } from "./crafting_queue_item_table.ts";
export { CraftingQueueItemTableHandle };
import { DeathMarkerTableHandle } from "./death_marker_table.ts";
export { DeathMarkerTableHandle };
import { DroppedItemTableHandle } from "./dropped_item_table.ts";
export { DroppedItemTableHandle };
import { DroppedItemDespawnScheduleTableHandle } from "./dropped_item_despawn_schedule_table.ts";
export { DroppedItemDespawnScheduleTableHandle };
import { FishingSessionTableHandle } from "./fishing_session_table.ts";
export { FishingSessionTableHandle };
import { GlobalTickScheduleTableHandle } from "./global_tick_schedule_table.ts";
export { GlobalTickScheduleTableHandle };
import { GrassTableHandle } from "./grass_table.ts";
export { GrassTableHandle };
import { GrassRespawnScheduleTableHandle } from "./grass_respawn_schedule_table.ts";
export { GrassRespawnScheduleTableHandle };
import { HempTableHandle } from "./hemp_table.ts";
export { HempTableHandle };
import { InventoryItemTableHandle } from "./inventory_item_table.ts";
export { InventoryItemTableHandle };
import { ItemDefinitionTableHandle } from "./item_definition_table.ts";
export { ItemDefinitionTableHandle };
import { KnockedOutRecoveryScheduleTableHandle } from "./knocked_out_recovery_schedule_table.ts";
export { KnockedOutRecoveryScheduleTableHandle };
import { KnockedOutStatusTableHandle } from "./knocked_out_status_table.ts";
export { KnockedOutStatusTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { MinimapCacheTableHandle } from "./minimap_cache_table.ts";
export { MinimapCacheTableHandle };
import { MushroomTableHandle } from "./mushroom_table.ts";
export { MushroomTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { PlayerCorpseTableHandle } from "./player_corpse_table.ts";
export { PlayerCorpseTableHandle };
import { PlayerCorpseDespawnScheduleTableHandle } from "./player_corpse_despawn_schedule_table.ts";
export { PlayerCorpseDespawnScheduleTableHandle };
import { PlayerDodgeRollStateTableHandle } from "./player_dodge_roll_state_table.ts";
export { PlayerDodgeRollStateTableHandle };
import { PlayerKillCommandCooldownTableHandle } from "./player_kill_command_cooldown_table.ts";
export { PlayerKillCommandCooldownTableHandle };
import { PlayerLastAttackTimestampTableHandle } from "./player_last_attack_timestamp_table.ts";
export { PlayerLastAttackTimestampTableHandle };
import { PlayerPinTableHandle } from "./player_pin_table.ts";
export { PlayerPinTableHandle };
import { PlayerStatScheduleTableHandle } from "./player_stat_schedule_table.ts";
export { PlayerStatScheduleTableHandle };
import { PotatoTableHandle } from "./potato_table.ts";
export { PotatoTableHandle };
import { PrivateMessageTableHandle } from "./private_message_table.ts";
export { PrivateMessageTableHandle };
import { ProcessEffectsScheduleTableHandle } from "./process_effects_schedule_table.ts";
export { ProcessEffectsScheduleTableHandle };
import { ProjectileTableHandle } from "./projectile_table.ts";
export { ProjectileTableHandle };
import { ProjectileUpdateScheduleTableHandle } from "./projectile_update_schedule_table.ts";
export { ProjectileUpdateScheduleTableHandle };
import { PumpkinTableHandle } from "./pumpkin_table.ts";
export { PumpkinTableHandle };
import { RangedWeaponStatsTableHandle } from "./ranged_weapon_stats_table.ts";
export { RangedWeaponStatsTableHandle };
import { RecipeTableHandle } from "./recipe_table.ts";
export { RecipeTableHandle };
import { ShelterTableHandle } from "./shelter_table.ts";
export { ShelterTableHandle };
import { SleepingBagTableHandle } from "./sleeping_bag_table.ts";
export { SleepingBagTableHandle };
import { StashTableHandle } from "./stash_table.ts";
export { StashTableHandle };
import { StatThresholdsConfigTableHandle } from "./stat_thresholds_config_table.ts";
export { StatThresholdsConfigTableHandle };
import { StoneTableHandle } from "./stone_table.ts";
export { StoneTableHandle };
import { ThunderEventTableHandle } from "./thunder_event_table.ts";
export { ThunderEventTableHandle };
import { TreeTableHandle } from "./tree_table.ts";
export { TreeTableHandle };
import { WoodenStorageBoxTableHandle } from "./wooden_storage_box_table.ts";
export { WoodenStorageBoxTableHandle };
import { WorldChunkDataTableHandle } from "./world_chunk_data_table.ts";
export { WorldChunkDataTableHandle };
import { WorldStateTableHandle } from "./world_state_table.ts";
export { WorldStateTableHandle };
import { WorldTileTableHandle } from "./world_tile_table.ts";
export { WorldTileTableHandle };

// Import and reexport all types
import { ActiveConnection } from "./active_connection_type.ts";
export { ActiveConnection };
import { ActiveConsumableEffect } from "./active_consumable_effect_type.ts";
export { ActiveConsumableEffect };
import { ActiveEquipment } from "./active_equipment_type.ts";
export { ActiveEquipment };
import { ArrowBreakEvent } from "./arrow_break_event_type.ts";
export { ArrowBreakEvent };
import { Campfire } from "./campfire_type.ts";
export { Campfire };
import { CampfireProcessingSchedule } from "./campfire_processing_schedule_type.ts";
export { CampfireProcessingSchedule };
import { ClientViewport } from "./client_viewport_type.ts";
export { ClientViewport };
import { Cloud } from "./cloud_type.ts";
export { Cloud };
import { CloudShapeType } from "./cloud_shape_type_type.ts";
export { CloudShapeType };
import { CloudUpdateSchedule } from "./cloud_update_schedule_type.ts";
export { CloudUpdateSchedule };
import { ContainerLocationData } from "./container_location_data_type.ts";
export { ContainerLocationData };
import { ContainerType } from "./container_type_type.ts";
export { ContainerType };
import { CookingProgress } from "./cooking_progress_type.ts";
export { CookingProgress };
import { Corn } from "./corn_type.ts";
export { Corn };
import { CostIngredient } from "./cost_ingredient_type.ts";
export { CostIngredient };
import { CraftingFinishSchedule } from "./crafting_finish_schedule_type.ts";
export { CraftingFinishSchedule };
import { CraftingQueueItem } from "./crafting_queue_item_type.ts";
export { CraftingQueueItem };
import { DeathMarker } from "./death_marker_type.ts";
export { DeathMarker };
import { DroppedItem } from "./dropped_item_type.ts";
export { DroppedItem };
import { DroppedItemDespawnSchedule } from "./dropped_item_despawn_schedule_type.ts";
export { DroppedItemDespawnSchedule };
import { DroppedLocationData } from "./dropped_location_data_type.ts";
export { DroppedLocationData };
import { EffectType } from "./effect_type_type.ts";
export { EffectType };
import { EquipmentSlotType } from "./equipment_slot_type_type.ts";
export { EquipmentSlotType };
import { EquippedLocationData } from "./equipped_location_data_type.ts";
export { EquippedLocationData };
import { FishingSession } from "./fishing_session_type.ts";
export { FishingSession };
import { GlobalTickSchedule } from "./global_tick_schedule_type.ts";
export { GlobalTickSchedule };
import { Grass } from "./grass_type.ts";
export { Grass };
import { GrassAppearanceType } from "./grass_appearance_type_type.ts";
export { GrassAppearanceType };
import { GrassRespawnData } from "./grass_respawn_data_type.ts";
export { GrassRespawnData };
import { GrassRespawnSchedule } from "./grass_respawn_schedule_type.ts";
export { GrassRespawnSchedule };
import { Hemp } from "./hemp_type.ts";
export { Hemp };
import { HotbarLocationData } from "./hotbar_location_data_type.ts";
export { HotbarLocationData };
import { InventoryItem } from "./inventory_item_type.ts";
export { InventoryItem };
import { InventoryLocationData } from "./inventory_location_data_type.ts";
export { InventoryLocationData };
import { ItemCategory } from "./item_category_type.ts";
export { ItemCategory };
import { ItemDefinition } from "./item_definition_type.ts";
export { ItemDefinition };
import { ItemLocation } from "./item_location_type.ts";
export { ItemLocation };
import { KnockedOutRecoverySchedule } from "./knocked_out_recovery_schedule_type.ts";
export { KnockedOutRecoverySchedule };
import { KnockedOutStatus } from "./knocked_out_status_type.ts";
export { KnockedOutStatus };
import { Message } from "./message_type.ts";
export { Message };
import { MinimapCache } from "./minimap_cache_type.ts";
export { MinimapCache };
import { Mushroom } from "./mushroom_type.ts";
export { Mushroom };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerCorpse } from "./player_corpse_type.ts";
export { PlayerCorpse };
import { PlayerCorpseDespawnSchedule } from "./player_corpse_despawn_schedule_type.ts";
export { PlayerCorpseDespawnSchedule };
import { PlayerDodgeRollState } from "./player_dodge_roll_state_type.ts";
export { PlayerDodgeRollState };
import { PlayerKillCommandCooldown } from "./player_kill_command_cooldown_type.ts";
export { PlayerKillCommandCooldown };
import { PlayerLastAttackTimestamp } from "./player_last_attack_timestamp_type.ts";
export { PlayerLastAttackTimestamp };
import { PlayerPin } from "./player_pin_type.ts";
export { PlayerPin };
import { PlayerStatSchedule } from "./player_stat_schedule_type.ts";
export { PlayerStatSchedule };
import { Potato } from "./potato_type.ts";
export { Potato };
import { PrivateMessage } from "./private_message_type.ts";
export { PrivateMessage };
import { ProcessEffectsSchedule } from "./process_effects_schedule_type.ts";
export { ProcessEffectsSchedule };
import { Projectile } from "./projectile_type.ts";
export { Projectile };
import { ProjectileUpdateSchedule } from "./projectile_update_schedule_type.ts";
export { ProjectileUpdateSchedule };
import { Pumpkin } from "./pumpkin_type.ts";
export { Pumpkin };
import { RangedWeaponStats } from "./ranged_weapon_stats_type.ts";
export { RangedWeaponStats };
import { Recipe } from "./recipe_type.ts";
export { Recipe };
import { RecipeIngredient } from "./recipe_ingredient_type.ts";
export { RecipeIngredient };
import { Shelter } from "./shelter_type.ts";
export { Shelter };
import { SleepingBag } from "./sleeping_bag_type.ts";
export { SleepingBag };
import { Stash } from "./stash_type.ts";
export { Stash };
import { StatThresholdsConfig } from "./stat_thresholds_config_type.ts";
export { StatThresholdsConfig };
import { Stone } from "./stone_type.ts";
export { Stone };
import { TargetType } from "./target_type_type.ts";
export { TargetType };
import { ThunderEvent } from "./thunder_event_type.ts";
export { ThunderEvent };
import { TileType } from "./tile_type_type.ts";
export { TileType };
import { TimeOfDay } from "./time_of_day_type.ts";
export { TimeOfDay };
import { Tree } from "./tree_type.ts";
export { Tree };
import { TreeType } from "./tree_type_type.ts";
export { TreeType };
import { WeatherType } from "./weather_type_type.ts";
export { WeatherType };
import { WoodenStorageBox } from "./wooden_storage_box_type.ts";
export { WoodenStorageBox };
import { WorldChunkData } from "./world_chunk_data_type.ts";
export { WorldChunkData };
import { WorldGenConfig } from "./world_gen_config_type.ts";
export { WorldGenConfig };
import { WorldState } from "./world_state_type.ts";
export { WorldState };
import { WorldTile } from "./world_tile_type.ts";
export { WorldTile };

const REMOTE_MODULE = {
  tables: {
    active_connection: {
      tableName: "active_connection",
      rowType: ActiveConnection.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    active_consumable_effect: {
      tableName: "active_consumable_effect",
      rowType: ActiveConsumableEffect.getTypeScriptAlgebraicType(),
      primaryKey: "effectId",
    },
    active_equipment: {
      tableName: "active_equipment",
      rowType: ActiveEquipment.getTypeScriptAlgebraicType(),
      primaryKey: "playerIdentity",
    },
    arrow_break_event: {
      tableName: "arrow_break_event",
      rowType: ArrowBreakEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    campfire: {
      tableName: "campfire",
      rowType: Campfire.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    campfire_processing_schedule: {
      tableName: "campfire_processing_schedule",
      rowType: CampfireProcessingSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "campfireId",
    },
    client_viewport: {
      tableName: "client_viewport",
      rowType: ClientViewport.getTypeScriptAlgebraicType(),
      primaryKey: "clientIdentity",
    },
    cloud: {
      tableName: "cloud",
      rowType: Cloud.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    cloud_update_schedule: {
      tableName: "cloud_update_schedule",
      rowType: CloudUpdateSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduleId",
    },
    corn: {
      tableName: "corn",
      rowType: Corn.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    crafting_finish_schedule: {
      tableName: "crafting_finish_schedule",
      rowType: CraftingFinishSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    crafting_queue_item: {
      tableName: "crafting_queue_item",
      rowType: CraftingQueueItem.getTypeScriptAlgebraicType(),
      primaryKey: "queueItemId",
    },
    death_marker: {
      tableName: "death_marker",
      rowType: DeathMarker.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    dropped_item: {
      tableName: "dropped_item",
      rowType: DroppedItem.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    dropped_item_despawn_schedule: {
      tableName: "dropped_item_despawn_schedule",
      rowType: DroppedItemDespawnSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    fishing_session: {
      tableName: "fishing_session",
      rowType: FishingSession.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    global_tick_schedule: {
      tableName: "global_tick_schedule",
      rowType: GlobalTickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    grass: {
      tableName: "grass",
      rowType: Grass.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    grass_respawn_schedule: {
      tableName: "grass_respawn_schedule",
      rowType: GrassRespawnSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduleId",
    },
    hemp: {
      tableName: "hemp",
      rowType: Hemp.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    inventory_item: {
      tableName: "inventory_item",
      rowType: InventoryItem.getTypeScriptAlgebraicType(),
      primaryKey: "instanceId",
    },
    item_definition: {
      tableName: "item_definition",
      rowType: ItemDefinition.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    knocked_out_recovery_schedule: {
      tableName: "knocked_out_recovery_schedule",
      rowType: KnockedOutRecoverySchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduleId",
    },
    knocked_out_status: {
      tableName: "knocked_out_status",
      rowType: KnockedOutStatus.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    minimap_cache: {
      tableName: "minimap_cache",
      rowType: MinimapCache.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    mushroom: {
      tableName: "mushroom",
      rowType: Mushroom.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player_corpse: {
      tableName: "player_corpse",
      rowType: PlayerCorpse.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    player_corpse_despawn_schedule: {
      tableName: "player_corpse_despawn_schedule",
      rowType: PlayerCorpseDespawnSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "corpseId",
    },
    player_dodge_roll_state: {
      tableName: "player_dodge_roll_state",
      rowType: PlayerDodgeRollState.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    player_kill_command_cooldown: {
      tableName: "player_kill_command_cooldown",
      rowType: PlayerKillCommandCooldown.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    player_last_attack_timestamp: {
      tableName: "player_last_attack_timestamp",
      rowType: PlayerLastAttackTimestamp.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    player_pin: {
      tableName: "player_pin",
      rowType: PlayerPin.getTypeScriptAlgebraicType(),
      primaryKey: "playerId",
    },
    player_stat_schedule: {
      tableName: "player_stat_schedule",
      rowType: PlayerStatSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    potato: {
      tableName: "potato",
      rowType: Potato.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    private_message: {
      tableName: "private_message",
      rowType: PrivateMessage.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    process_effects_schedule: {
      tableName: "process_effects_schedule",
      rowType: ProcessEffectsSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "jobId",
    },
    projectile: {
      tableName: "projectile",
      rowType: Projectile.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    projectile_update_schedule: {
      tableName: "projectile_update_schedule",
      rowType: ProjectileUpdateSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    pumpkin: {
      tableName: "pumpkin",
      rowType: Pumpkin.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    ranged_weapon_stats: {
      tableName: "ranged_weapon_stats",
      rowType: RangedWeaponStats.getTypeScriptAlgebraicType(),
      primaryKey: "itemName",
    },
    recipe: {
      tableName: "recipe",
      rowType: Recipe.getTypeScriptAlgebraicType(),
      primaryKey: "recipeId",
    },
    shelter: {
      tableName: "shelter",
      rowType: Shelter.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    sleeping_bag: {
      tableName: "sleeping_bag",
      rowType: SleepingBag.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    stash: {
      tableName: "stash",
      rowType: Stash.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    stat_thresholds_config: {
      tableName: "stat_thresholds_config",
      rowType: StatThresholdsConfig.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    stone: {
      tableName: "stone",
      rowType: Stone.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    thunder_event: {
      tableName: "thunder_event",
      rowType: ThunderEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    tree: {
      tableName: "tree",
      rowType: Tree.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    wooden_storage_box: {
      tableName: "wooden_storage_box",
      rowType: WoodenStorageBox.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    world_chunk_data: {
      tableName: "world_chunk_data",
      rowType: WorldChunkData.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    world_state: {
      tableName: "world_state",
      rowType: WorldState.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    world_tile: {
      tableName: "world_tile",
      rowType: WorldTile.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
  },
  reducers: {
    add_fuel_to_campfire: {
      reducerName: "add_fuel_to_campfire",
      argsType: AddFuelToCampfire.getTypeScriptAlgebraicType(),
    },
    auto_remove_fuel_from_campfire: {
      reducerName: "auto_remove_fuel_from_campfire",
      argsType: AutoRemoveFuelFromCampfire.getTypeScriptAlgebraicType(),
    },
    cancel_all_crafting: {
      reducerName: "cancel_all_crafting",
      argsType: CancelAllCrafting.getTypeScriptAlgebraicType(),
    },
    cancel_crafting_item: {
      reducerName: "cancel_crafting_item",
      argsType: CancelCraftingItem.getTypeScriptAlgebraicType(),
    },
    cancel_fishing: {
      reducerName: "cancel_fishing",
      argsType: CancelFishing.getTypeScriptAlgebraicType(),
    },
    cast_fishing_line: {
      reducerName: "cast_fishing_line",
      argsType: CastFishingLine.getTypeScriptAlgebraicType(),
    },
    check_finished_crafting: {
      reducerName: "check_finished_crafting",
      argsType: CheckFinishedCrafting.getTypeScriptAlgebraicType(),
    },
    check_resource_respawns: {
      reducerName: "check_resource_respawns",
      argsType: CheckResourceRespawns.getTypeScriptAlgebraicType(),
    },
    clear_active_item_reducer: {
      reducerName: "clear_active_item_reducer",
      argsType: ClearActiveItemReducer.getTypeScriptAlgebraicType(),
    },
    consume_item: {
      reducerName: "consume_item",
      argsType: ConsumeItem.getTypeScriptAlgebraicType(),
    },
    crush_bone_item: {
      reducerName: "crush_bone_item",
      argsType: CrushBoneItem.getTypeScriptAlgebraicType(),
    },
    despawn_expired_items: {
      reducerName: "despawn_expired_items",
      argsType: DespawnExpiredItems.getTypeScriptAlgebraicType(),
    },
    dodge_roll: {
      reducerName: "dodge_roll",
      argsType: DodgeRoll.getTypeScriptAlgebraicType(),
    },
    drop_item: {
      reducerName: "drop_item",
      argsType: DropItem.getTypeScriptAlgebraicType(),
    },
    drop_item_from_box_slot_to_world: {
      reducerName: "drop_item_from_box_slot_to_world",
      argsType: DropItemFromBoxSlotToWorld.getTypeScriptAlgebraicType(),
    },
    drop_item_from_campfire_slot_to_world: {
      reducerName: "drop_item_from_campfire_slot_to_world",
      argsType: DropItemFromCampfireSlotToWorld.getTypeScriptAlgebraicType(),
    },
    drop_item_from_corpse_slot_to_world: {
      reducerName: "drop_item_from_corpse_slot_to_world",
      argsType: DropItemFromCorpseSlotToWorld.getTypeScriptAlgebraicType(),
    },
    drop_item_from_stash_slot_to_world: {
      reducerName: "drop_item_from_stash_slot_to_world",
      argsType: DropItemFromStashSlotToWorld.getTypeScriptAlgebraicType(),
    },
    equip_armor: {
      reducerName: "equip_armor",
      argsType: EquipArmor.getTypeScriptAlgebraicType(),
    },
    equip_armor_from_drag: {
      reducerName: "equip_armor_from_drag",
      argsType: EquipArmorFromDrag.getTypeScriptAlgebraicType(),
    },
    equip_armor_from_inventory: {
      reducerName: "equip_armor_from_inventory",
      argsType: EquipArmorFromInventory.getTypeScriptAlgebraicType(),
    },
    finish_fishing: {
      reducerName: "finish_fishing",
      argsType: FinishFishing.getTypeScriptAlgebraicType(),
    },
    fire_projectile: {
      reducerName: "fire_projectile",
      argsType: FireProjectile.getTypeScriptAlgebraicType(),
    },
    generate_default_world: {
      reducerName: "generate_default_world",
      argsType: GenerateDefaultWorld.getTypeScriptAlgebraicType(),
    },
    generate_minimap_data: {
      reducerName: "generate_minimap_data",
      argsType: GenerateMinimapData.getTypeScriptAlgebraicType(),
    },
    generate_world: {
      reducerName: "generate_world",
      argsType: GenerateWorld.getTypeScriptAlgebraicType(),
    },
    get_knocked_out_status: {
      reducerName: "get_knocked_out_status",
      argsType: GetKnockedOutStatus.getTypeScriptAlgebraicType(),
    },
    get_minimap_data: {
      reducerName: "get_minimap_data",
      argsType: GetMinimapData.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    init_projectile_system: {
      reducerName: "init_projectile_system",
      argsType: InitProjectileSystem.getTypeScriptAlgebraicType(),
    },
    interact_with_campfire: {
      reducerName: "interact_with_campfire",
      argsType: InteractWithCampfire.getTypeScriptAlgebraicType(),
    },
    interact_with_corn: {
      reducerName: "interact_with_corn",
      argsType: InteractWithCorn.getTypeScriptAlgebraicType(),
    },
    interact_with_hemp: {
      reducerName: "interact_with_hemp",
      argsType: InteractWithHemp.getTypeScriptAlgebraicType(),
    },
    interact_with_mushroom: {
      reducerName: "interact_with_mushroom",
      argsType: InteractWithMushroom.getTypeScriptAlgebraicType(),
    },
    interact_with_potato: {
      reducerName: "interact_with_potato",
      argsType: InteractWithPotato.getTypeScriptAlgebraicType(),
    },
    interact_with_pumpkin: {
      reducerName: "interact_with_pumpkin",
      argsType: InteractWithPumpkin.getTypeScriptAlgebraicType(),
    },
    interact_with_sleeping_bag: {
      reducerName: "interact_with_sleeping_bag",
      argsType: InteractWithSleepingBag.getTypeScriptAlgebraicType(),
    },
    interact_with_storage_box: {
      reducerName: "interact_with_storage_box",
      argsType: InteractWithStorageBox.getTypeScriptAlgebraicType(),
    },
    jump: {
      reducerName: "jump",
      argsType: Jump.getTypeScriptAlgebraicType(),
    },
    load_ranged_weapon: {
      reducerName: "load_ranged_weapon",
      argsType: LoadRangedWeapon.getTypeScriptAlgebraicType(),
    },
    move_fuel_item_to_player_slot: {
      reducerName: "move_fuel_item_to_player_slot",
      argsType: MoveFuelItemToPlayerSlot.getTypeScriptAlgebraicType(),
    },
    move_fuel_within_campfire: {
      reducerName: "move_fuel_within_campfire",
      argsType: MoveFuelWithinCampfire.getTypeScriptAlgebraicType(),
    },
    move_item_from_box: {
      reducerName: "move_item_from_box",
      argsType: MoveItemFromBox.getTypeScriptAlgebraicType(),
    },
    move_item_from_corpse: {
      reducerName: "move_item_from_corpse",
      argsType: MoveItemFromCorpse.getTypeScriptAlgebraicType(),
    },
    move_item_from_stash: {
      reducerName: "move_item_from_stash",
      argsType: MoveItemFromStash.getTypeScriptAlgebraicType(),
    },
    move_item_to_box: {
      reducerName: "move_item_to_box",
      argsType: MoveItemToBox.getTypeScriptAlgebraicType(),
    },
    move_item_to_corpse: {
      reducerName: "move_item_to_corpse",
      argsType: MoveItemToCorpse.getTypeScriptAlgebraicType(),
    },
    move_item_to_hotbar: {
      reducerName: "move_item_to_hotbar",
      argsType: MoveItemToHotbar.getTypeScriptAlgebraicType(),
    },
    move_item_to_inventory: {
      reducerName: "move_item_to_inventory",
      argsType: MoveItemToInventory.getTypeScriptAlgebraicType(),
    },
    move_item_to_stash: {
      reducerName: "move_item_to_stash",
      argsType: MoveItemToStash.getTypeScriptAlgebraicType(),
    },
    move_item_within_box: {
      reducerName: "move_item_within_box",
      argsType: MoveItemWithinBox.getTypeScriptAlgebraicType(),
    },
    move_item_within_corpse: {
      reducerName: "move_item_within_corpse",
      argsType: MoveItemWithinCorpse.getTypeScriptAlgebraicType(),
    },
    move_item_within_stash: {
      reducerName: "move_item_within_stash",
      argsType: MoveItemWithinStash.getTypeScriptAlgebraicType(),
    },
    move_to_first_available_hotbar_slot: {
      reducerName: "move_to_first_available_hotbar_slot",
      argsType: MoveToFirstAvailableHotbarSlot.getTypeScriptAlgebraicType(),
    },
    pickup_dropped_item: {
      reducerName: "pickup_dropped_item",
      argsType: PickupDroppedItem.getTypeScriptAlgebraicType(),
    },
    pickup_storage_box: {
      reducerName: "pickup_storage_box",
      argsType: PickupStorageBox.getTypeScriptAlgebraicType(),
    },
    place_campfire: {
      reducerName: "place_campfire",
      argsType: PlaceCampfire.getTypeScriptAlgebraicType(),
    },
    place_shelter: {
      reducerName: "place_shelter",
      argsType: PlaceShelter.getTypeScriptAlgebraicType(),
    },
    place_sleeping_bag: {
      reducerName: "place_sleeping_bag",
      argsType: PlaceSleepingBag.getTypeScriptAlgebraicType(),
    },
    place_stash: {
      reducerName: "place_stash",
      argsType: PlaceStash.getTypeScriptAlgebraicType(),
    },
    place_wooden_storage_box: {
      reducerName: "place_wooden_storage_box",
      argsType: PlaceWoodenStorageBox.getTypeScriptAlgebraicType(),
    },
    process_active_consumable_effects_tick: {
      reducerName: "process_active_consumable_effects_tick",
      argsType: ProcessActiveConsumableEffectsTick.getTypeScriptAlgebraicType(),
    },
    process_campfire_logic_scheduled: {
      reducerName: "process_campfire_logic_scheduled",
      argsType: ProcessCampfireLogicScheduled.getTypeScriptAlgebraicType(),
    },
    process_corpse_despawn: {
      reducerName: "process_corpse_despawn",
      argsType: ProcessCorpseDespawn.getTypeScriptAlgebraicType(),
    },
    process_global_tick: {
      reducerName: "process_global_tick",
      argsType: ProcessGlobalTick.getTypeScriptAlgebraicType(),
    },
    process_grass_respawn: {
      reducerName: "process_grass_respawn",
      argsType: ProcessGrassRespawn.getTypeScriptAlgebraicType(),
    },
    process_knocked_out_recovery: {
      reducerName: "process_knocked_out_recovery",
      argsType: ProcessKnockedOutRecovery.getTypeScriptAlgebraicType(),
    },
    process_player_stats: {
      reducerName: "process_player_stats",
      argsType: ProcessPlayerStats.getTypeScriptAlgebraicType(),
    },
    quick_move_from_box: {
      reducerName: "quick_move_from_box",
      argsType: QuickMoveFromBox.getTypeScriptAlgebraicType(),
    },
    quick_move_from_corpse: {
      reducerName: "quick_move_from_corpse",
      argsType: QuickMoveFromCorpse.getTypeScriptAlgebraicType(),
    },
    quick_move_from_stash: {
      reducerName: "quick_move_from_stash",
      argsType: QuickMoveFromStash.getTypeScriptAlgebraicType(),
    },
    quick_move_to_box: {
      reducerName: "quick_move_to_box",
      argsType: QuickMoveToBox.getTypeScriptAlgebraicType(),
    },
    quick_move_to_campfire: {
      reducerName: "quick_move_to_campfire",
      argsType: QuickMoveToCampfire.getTypeScriptAlgebraicType(),
    },
    quick_move_to_corpse: {
      reducerName: "quick_move_to_corpse",
      argsType: QuickMoveToCorpse.getTypeScriptAlgebraicType(),
    },
    quick_move_to_stash: {
      reducerName: "quick_move_to_stash",
      argsType: QuickMoveToStash.getTypeScriptAlgebraicType(),
    },
    regenerate_compressed_chunks: {
      reducerName: "regenerate_compressed_chunks",
      argsType: RegenerateCompressedChunks.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    respawn_at_sleeping_bag: {
      reducerName: "respawn_at_sleeping_bag",
      argsType: RespawnAtSleepingBag.getTypeScriptAlgebraicType(),
    },
    respawn_randomly: {
      reducerName: "respawn_randomly",
      argsType: RespawnRandomly.getTypeScriptAlgebraicType(),
    },
    revive_knocked_out_player: {
      reducerName: "revive_knocked_out_player",
      argsType: ReviveKnockedOutPlayer.getTypeScriptAlgebraicType(),
    },
    schedule_next_campfire_processing: {
      reducerName: "schedule_next_campfire_processing",
      argsType: ScheduleNextCampfireProcessing.getTypeScriptAlgebraicType(),
    },
    seed_environment: {
      reducerName: "seed_environment",
      argsType: SeedEnvironment.getTypeScriptAlgebraicType(),
    },
    seed_items: {
      reducerName: "seed_items",
      argsType: SeedItems.getTypeScriptAlgebraicType(),
    },
    seed_ranged_weapon_stats: {
      reducerName: "seed_ranged_weapon_stats",
      argsType: SeedRangedWeaponStats.getTypeScriptAlgebraicType(),
    },
    seed_recipes: {
      reducerName: "seed_recipes",
      argsType: SeedRecipes.getTypeScriptAlgebraicType(),
    },
    seed_world_state: {
      reducerName: "seed_world_state",
      argsType: SeedWorldState.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_active_item_reducer: {
      reducerName: "set_active_item_reducer",
      argsType: SetActiveItemReducer.getTypeScriptAlgebraicType(),
    },
    set_player_pin: {
      reducerName: "set_player_pin",
      argsType: SetPlayerPin.getTypeScriptAlgebraicType(),
    },
    set_sprinting: {
      reducerName: "set_sprinting",
      argsType: SetSprinting.getTypeScriptAlgebraicType(),
    },
    split_and_drop_item_from_box_slot_to_world: {
      reducerName: "split_and_drop_item_from_box_slot_to_world",
      argsType: SplitAndDropItemFromBoxSlotToWorld.getTypeScriptAlgebraicType(),
    },
    split_and_drop_item_from_campfire_slot_to_world: {
      reducerName: "split_and_drop_item_from_campfire_slot_to_world",
      argsType: SplitAndDropItemFromCampfireSlotToWorld.getTypeScriptAlgebraicType(),
    },
    split_and_drop_item_from_corpse_slot_to_world: {
      reducerName: "split_and_drop_item_from_corpse_slot_to_world",
      argsType: SplitAndDropItemFromCorpseSlotToWorld.getTypeScriptAlgebraicType(),
    },
    split_and_drop_item_from_stash_slot_to_world: {
      reducerName: "split_and_drop_item_from_stash_slot_to_world",
      argsType: SplitAndDropItemFromStashSlotToWorld.getTypeScriptAlgebraicType(),
    },
    split_and_move_from_campfire: {
      reducerName: "split_and_move_from_campfire",
      argsType: SplitAndMoveFromCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack: {
      reducerName: "split_stack",
      argsType: SplitStack.getTypeScriptAlgebraicType(),
    },
    split_stack_from_box: {
      reducerName: "split_stack_from_box",
      argsType: SplitStackFromBox.getTypeScriptAlgebraicType(),
    },
    split_stack_from_campfire: {
      reducerName: "split_stack_from_campfire",
      argsType: SplitStackFromCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack_from_corpse: {
      reducerName: "split_stack_from_corpse",
      argsType: SplitStackFromCorpse.getTypeScriptAlgebraicType(),
    },
    split_stack_from_stash: {
      reducerName: "split_stack_from_stash",
      argsType: SplitStackFromStash.getTypeScriptAlgebraicType(),
    },
    split_stack_into_box: {
      reducerName: "split_stack_into_box",
      argsType: SplitStackIntoBox.getTypeScriptAlgebraicType(),
    },
    split_stack_into_campfire: {
      reducerName: "split_stack_into_campfire",
      argsType: SplitStackIntoCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack_into_corpse: {
      reducerName: "split_stack_into_corpse",
      argsType: SplitStackIntoCorpse.getTypeScriptAlgebraicType(),
    },
    split_stack_into_stash: {
      reducerName: "split_stack_into_stash",
      argsType: SplitStackIntoStash.getTypeScriptAlgebraicType(),
    },
    split_stack_within_box: {
      reducerName: "split_stack_within_box",
      argsType: SplitStackWithinBox.getTypeScriptAlgebraicType(),
    },
    split_stack_within_campfire: {
      reducerName: "split_stack_within_campfire",
      argsType: SplitStackWithinCampfire.getTypeScriptAlgebraicType(),
    },
    split_stack_within_corpse: {
      reducerName: "split_stack_within_corpse",
      argsType: SplitStackWithinCorpse.getTypeScriptAlgebraicType(),
    },
    split_stack_within_stash: {
      reducerName: "split_stack_within_stash",
      argsType: SplitStackWithinStash.getTypeScriptAlgebraicType(),
    },
    start_crafting: {
      reducerName: "start_crafting",
      argsType: StartCrafting.getTypeScriptAlgebraicType(),
    },
    start_crafting_multiple: {
      reducerName: "start_crafting_multiple",
      argsType: StartCraftingMultiple.getTypeScriptAlgebraicType(),
    },
    throw_item: {
      reducerName: "throw_item",
      argsType: ThrowItem.getTypeScriptAlgebraicType(),
    },
    tick_world_state: {
      reducerName: "tick_world_state",
      argsType: TickWorldState.getTypeScriptAlgebraicType(),
    },
    toggle_campfire_burning: {
      reducerName: "toggle_campfire_burning",
      argsType: ToggleCampfireBurning.getTypeScriptAlgebraicType(),
    },
    toggle_crouch: {
      reducerName: "toggle_crouch",
      argsType: ToggleCrouch.getTypeScriptAlgebraicType(),
    },
    toggle_stash_visibility: {
      reducerName: "toggle_stash_visibility",
      argsType: ToggleStashVisibility.getTypeScriptAlgebraicType(),
    },
    toggle_torch: {
      reducerName: "toggle_torch",
      argsType: ToggleTorch.getTypeScriptAlgebraicType(),
    },
    update_cloud_positions: {
      reducerName: "update_cloud_positions",
      argsType: UpdateCloudPositions.getTypeScriptAlgebraicType(),
    },
    update_player_facing_direction: {
      reducerName: "update_player_facing_direction",
      argsType: UpdatePlayerFacingDirection.getTypeScriptAlgebraicType(),
    },
    update_player_position_simple: {
      reducerName: "update_player_position_simple",
      argsType: UpdatePlayerPositionSimple.getTypeScriptAlgebraicType(),
    },
    update_projectiles: {
      reducerName: "update_projectiles",
      argsType: UpdateProjectiles.getTypeScriptAlgebraicType(),
    },
    update_viewport: {
      reducerName: "update_viewport",
      argsType: UpdateViewport.getTypeScriptAlgebraicType(),
    },
    use_equipped_item: {
      reducerName: "use_equipped_item",
      argsType: UseEquippedItem.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddFuelToCampfire", args: AddFuelToCampfire }
| { name: "AutoRemoveFuelFromCampfire", args: AutoRemoveFuelFromCampfire }
| { name: "CancelAllCrafting", args: CancelAllCrafting }
| { name: "CancelCraftingItem", args: CancelCraftingItem }
| { name: "CancelFishing", args: CancelFishing }
| { name: "CastFishingLine", args: CastFishingLine }
| { name: "CheckFinishedCrafting", args: CheckFinishedCrafting }
| { name: "CheckResourceRespawns", args: CheckResourceRespawns }
| { name: "ClearActiveItemReducer", args: ClearActiveItemReducer }
| { name: "ConsumeItem", args: ConsumeItem }
| { name: "CrushBoneItem", args: CrushBoneItem }
| { name: "DespawnExpiredItems", args: DespawnExpiredItems }
| { name: "DodgeRoll", args: DodgeRoll }
| { name: "DropItem", args: DropItem }
| { name: "DropItemFromBoxSlotToWorld", args: DropItemFromBoxSlotToWorld }
| { name: "DropItemFromCampfireSlotToWorld", args: DropItemFromCampfireSlotToWorld }
| { name: "DropItemFromCorpseSlotToWorld", args: DropItemFromCorpseSlotToWorld }
| { name: "DropItemFromStashSlotToWorld", args: DropItemFromStashSlotToWorld }
| { name: "EquipArmor", args: EquipArmor }
| { name: "EquipArmorFromDrag", args: EquipArmorFromDrag }
| { name: "EquipArmorFromInventory", args: EquipArmorFromInventory }
| { name: "FinishFishing", args: FinishFishing }
| { name: "FireProjectile", args: FireProjectile }
| { name: "GenerateDefaultWorld", args: GenerateDefaultWorld }
| { name: "GenerateMinimapData", args: GenerateMinimapData }
| { name: "GenerateWorld", args: GenerateWorld }
| { name: "GetKnockedOutStatus", args: GetKnockedOutStatus }
| { name: "GetMinimapData", args: GetMinimapData }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "InitProjectileSystem", args: InitProjectileSystem }
| { name: "InteractWithCampfire", args: InteractWithCampfire }
| { name: "InteractWithCorn", args: InteractWithCorn }
| { name: "InteractWithHemp", args: InteractWithHemp }
| { name: "InteractWithMushroom", args: InteractWithMushroom }
| { name: "InteractWithPotato", args: InteractWithPotato }
| { name: "InteractWithPumpkin", args: InteractWithPumpkin }
| { name: "InteractWithSleepingBag", args: InteractWithSleepingBag }
| { name: "InteractWithStorageBox", args: InteractWithStorageBox }
| { name: "Jump", args: Jump }
| { name: "LoadRangedWeapon", args: LoadRangedWeapon }
| { name: "MoveFuelItemToPlayerSlot", args: MoveFuelItemToPlayerSlot }
| { name: "MoveFuelWithinCampfire", args: MoveFuelWithinCampfire }
| { name: "MoveItemFromBox", args: MoveItemFromBox }
| { name: "MoveItemFromCorpse", args: MoveItemFromCorpse }
| { name: "MoveItemFromStash", args: MoveItemFromStash }
| { name: "MoveItemToBox", args: MoveItemToBox }
| { name: "MoveItemToCorpse", args: MoveItemToCorpse }
| { name: "MoveItemToHotbar", args: MoveItemToHotbar }
| { name: "MoveItemToInventory", args: MoveItemToInventory }
| { name: "MoveItemToStash", args: MoveItemToStash }
| { name: "MoveItemWithinBox", args: MoveItemWithinBox }
| { name: "MoveItemWithinCorpse", args: MoveItemWithinCorpse }
| { name: "MoveItemWithinStash", args: MoveItemWithinStash }
| { name: "MoveToFirstAvailableHotbarSlot", args: MoveToFirstAvailableHotbarSlot }
| { name: "PickupDroppedItem", args: PickupDroppedItem }
| { name: "PickupStorageBox", args: PickupStorageBox }
| { name: "PlaceCampfire", args: PlaceCampfire }
| { name: "PlaceShelter", args: PlaceShelter }
| { name: "PlaceSleepingBag", args: PlaceSleepingBag }
| { name: "PlaceStash", args: PlaceStash }
| { name: "PlaceWoodenStorageBox", args: PlaceWoodenStorageBox }
| { name: "ProcessActiveConsumableEffectsTick", args: ProcessActiveConsumableEffectsTick }
| { name: "ProcessCampfireLogicScheduled", args: ProcessCampfireLogicScheduled }
| { name: "ProcessCorpseDespawn", args: ProcessCorpseDespawn }
| { name: "ProcessGlobalTick", args: ProcessGlobalTick }
| { name: "ProcessGrassRespawn", args: ProcessGrassRespawn }
| { name: "ProcessKnockedOutRecovery", args: ProcessKnockedOutRecovery }
| { name: "ProcessPlayerStats", args: ProcessPlayerStats }
| { name: "QuickMoveFromBox", args: QuickMoveFromBox }
| { name: "QuickMoveFromCorpse", args: QuickMoveFromCorpse }
| { name: "QuickMoveFromStash", args: QuickMoveFromStash }
| { name: "QuickMoveToBox", args: QuickMoveToBox }
| { name: "QuickMoveToCampfire", args: QuickMoveToCampfire }
| { name: "QuickMoveToCorpse", args: QuickMoveToCorpse }
| { name: "QuickMoveToStash", args: QuickMoveToStash }
| { name: "RegenerateCompressedChunks", args: RegenerateCompressedChunks }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "RespawnAtSleepingBag", args: RespawnAtSleepingBag }
| { name: "RespawnRandomly", args: RespawnRandomly }
| { name: "ReviveKnockedOutPlayer", args: ReviveKnockedOutPlayer }
| { name: "ScheduleNextCampfireProcessing", args: ScheduleNextCampfireProcessing }
| { name: "SeedEnvironment", args: SeedEnvironment }
| { name: "SeedItems", args: SeedItems }
| { name: "SeedRangedWeaponStats", args: SeedRangedWeaponStats }
| { name: "SeedRecipes", args: SeedRecipes }
| { name: "SeedWorldState", args: SeedWorldState }
| { name: "SendMessage", args: SendMessage }
| { name: "SetActiveItemReducer", args: SetActiveItemReducer }
| { name: "SetPlayerPin", args: SetPlayerPin }
| { name: "SetSprinting", args: SetSprinting }
| { name: "SplitAndDropItemFromBoxSlotToWorld", args: SplitAndDropItemFromBoxSlotToWorld }
| { name: "SplitAndDropItemFromCampfireSlotToWorld", args: SplitAndDropItemFromCampfireSlotToWorld }
| { name: "SplitAndDropItemFromCorpseSlotToWorld", args: SplitAndDropItemFromCorpseSlotToWorld }
| { name: "SplitAndDropItemFromStashSlotToWorld", args: SplitAndDropItemFromStashSlotToWorld }
| { name: "SplitAndMoveFromCampfire", args: SplitAndMoveFromCampfire }
| { name: "SplitStack", args: SplitStack }
| { name: "SplitStackFromBox", args: SplitStackFromBox }
| { name: "SplitStackFromCampfire", args: SplitStackFromCampfire }
| { name: "SplitStackFromCorpse", args: SplitStackFromCorpse }
| { name: "SplitStackFromStash", args: SplitStackFromStash }
| { name: "SplitStackIntoBox", args: SplitStackIntoBox }
| { name: "SplitStackIntoCampfire", args: SplitStackIntoCampfire }
| { name: "SplitStackIntoCorpse", args: SplitStackIntoCorpse }
| { name: "SplitStackIntoStash", args: SplitStackIntoStash }
| { name: "SplitStackWithinBox", args: SplitStackWithinBox }
| { name: "SplitStackWithinCampfire", args: SplitStackWithinCampfire }
| { name: "SplitStackWithinCorpse", args: SplitStackWithinCorpse }
| { name: "SplitStackWithinStash", args: SplitStackWithinStash }
| { name: "StartCrafting", args: StartCrafting }
| { name: "StartCraftingMultiple", args: StartCraftingMultiple }
| { name: "ThrowItem", args: ThrowItem }
| { name: "TickWorldState", args: TickWorldState }
| { name: "ToggleCampfireBurning", args: ToggleCampfireBurning }
| { name: "ToggleCrouch", args: ToggleCrouch }
| { name: "ToggleStashVisibility", args: ToggleStashVisibility }
| { name: "ToggleTorch", args: ToggleTorch }
| { name: "UpdateCloudPositions", args: UpdateCloudPositions }
| { name: "UpdatePlayerFacingDirection", args: UpdatePlayerFacingDirection }
| { name: "UpdatePlayerPositionSimple", args: UpdatePlayerPositionSimple }
| { name: "UpdateProjectiles", args: UpdateProjectiles }
| { name: "UpdateViewport", args: UpdateViewport }
| { name: "UseEquippedItem", args: UseEquippedItem }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addFuelToCampfire(campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) {
    const __args = { campfireId, targetSlotIndex, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    AddFuelToCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_fuel_to_campfire", __argsBuffer, this.setCallReducerFlags.addFuelToCampfireFlags);
  }

  onAddFuelToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("add_fuel_to_campfire", callback);
  }

  removeOnAddFuelToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("add_fuel_to_campfire", callback);
  }

  autoRemoveFuelFromCampfire(campfireId: number, sourceSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex };
    let __writer = new BinaryWriter(1024);
    AutoRemoveFuelFromCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("auto_remove_fuel_from_campfire", __argsBuffer, this.setCallReducerFlags.autoRemoveFuelFromCampfireFlags);
  }

  onAutoRemoveFuelFromCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number) => void) {
    this.connection.onReducer("auto_remove_fuel_from_campfire", callback);
  }

  removeOnAutoRemoveFuelFromCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number) => void) {
    this.connection.offReducer("auto_remove_fuel_from_campfire", callback);
  }

  cancelAllCrafting() {
    this.connection.callReducer("cancel_all_crafting", new Uint8Array(0), this.setCallReducerFlags.cancelAllCraftingFlags);
  }

  onCancelAllCrafting(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("cancel_all_crafting", callback);
  }

  removeOnCancelAllCrafting(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("cancel_all_crafting", callback);
  }

  cancelCraftingItem(queueItemId: bigint) {
    const __args = { queueItemId };
    let __writer = new BinaryWriter(1024);
    CancelCraftingItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cancel_crafting_item", __argsBuffer, this.setCallReducerFlags.cancelCraftingItemFlags);
  }

  onCancelCraftingItem(callback: (ctx: ReducerEventContext, queueItemId: bigint) => void) {
    this.connection.onReducer("cancel_crafting_item", callback);
  }

  removeOnCancelCraftingItem(callback: (ctx: ReducerEventContext, queueItemId: bigint) => void) {
    this.connection.offReducer("cancel_crafting_item", callback);
  }

  cancelFishing() {
    this.connection.callReducer("cancel_fishing", new Uint8Array(0), this.setCallReducerFlags.cancelFishingFlags);
  }

  onCancelFishing(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("cancel_fishing", callback);
  }

  removeOnCancelFishing(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("cancel_fishing", callback);
  }

  castFishingLine(targetX: number, targetY: number) {
    const __args = { targetX, targetY };
    let __writer = new BinaryWriter(1024);
    CastFishingLine.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cast_fishing_line", __argsBuffer, this.setCallReducerFlags.castFishingLineFlags);
  }

  onCastFishingLine(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.onReducer("cast_fishing_line", callback);
  }

  removeOnCastFishingLine(callback: (ctx: ReducerEventContext, targetX: number, targetY: number) => void) {
    this.connection.offReducer("cast_fishing_line", callback);
  }

  checkFinishedCrafting(schedule: CraftingFinishSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    CheckFinishedCrafting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_finished_crafting", __argsBuffer, this.setCallReducerFlags.checkFinishedCraftingFlags);
  }

  onCheckFinishedCrafting(callback: (ctx: ReducerEventContext, schedule: CraftingFinishSchedule) => void) {
    this.connection.onReducer("check_finished_crafting", callback);
  }

  removeOnCheckFinishedCrafting(callback: (ctx: ReducerEventContext, schedule: CraftingFinishSchedule) => void) {
    this.connection.offReducer("check_finished_crafting", callback);
  }

  checkResourceRespawns() {
    this.connection.callReducer("check_resource_respawns", new Uint8Array(0), this.setCallReducerFlags.checkResourceRespawnsFlags);
  }

  onCheckResourceRespawns(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("check_resource_respawns", callback);
  }

  removeOnCheckResourceRespawns(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("check_resource_respawns", callback);
  }

  clearActiveItemReducer(playerIdentity: Identity) {
    const __args = { playerIdentity };
    let __writer = new BinaryWriter(1024);
    ClearActiveItemReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("clear_active_item_reducer", __argsBuffer, this.setCallReducerFlags.clearActiveItemReducerFlags);
  }

  onClearActiveItemReducer(callback: (ctx: ReducerEventContext, playerIdentity: Identity) => void) {
    this.connection.onReducer("clear_active_item_reducer", callback);
  }

  removeOnClearActiveItemReducer(callback: (ctx: ReducerEventContext, playerIdentity: Identity) => void) {
    this.connection.offReducer("clear_active_item_reducer", callback);
  }

  consumeItem(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    ConsumeItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("consume_item", __argsBuffer, this.setCallReducerFlags.consumeItemFlags);
  }

  onConsumeItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("consume_item", callback);
  }

  removeOnConsumeItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("consume_item", callback);
  }

  crushBoneItem(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    CrushBoneItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("crush_bone_item", __argsBuffer, this.setCallReducerFlags.crushBoneItemFlags);
  }

  onCrushBoneItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("crush_bone_item", callback);
  }

  removeOnCrushBoneItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("crush_bone_item", callback);
  }

  despawnExpiredItems(schedule: DroppedItemDespawnSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    DespawnExpiredItems.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("despawn_expired_items", __argsBuffer, this.setCallReducerFlags.despawnExpiredItemsFlags);
  }

  onDespawnExpiredItems(callback: (ctx: ReducerEventContext, schedule: DroppedItemDespawnSchedule) => void) {
    this.connection.onReducer("despawn_expired_items", callback);
  }

  removeOnDespawnExpiredItems(callback: (ctx: ReducerEventContext, schedule: DroppedItemDespawnSchedule) => void) {
    this.connection.offReducer("despawn_expired_items", callback);
  }

  dodgeRoll(moveX: number, moveY: number) {
    const __args = { moveX, moveY };
    let __writer = new BinaryWriter(1024);
    DodgeRoll.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("dodge_roll", __argsBuffer, this.setCallReducerFlags.dodgeRollFlags);
  }

  onDodgeRoll(callback: (ctx: ReducerEventContext, moveX: number, moveY: number) => void) {
    this.connection.onReducer("dodge_roll", callback);
  }

  removeOnDodgeRoll(callback: (ctx: ReducerEventContext, moveX: number, moveY: number) => void) {
    this.connection.offReducer("dodge_roll", callback);
  }

  dropItem(itemInstanceId: bigint, quantityToDrop: number) {
    const __args = { itemInstanceId, quantityToDrop };
    let __writer = new BinaryWriter(1024);
    DropItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item", __argsBuffer, this.setCallReducerFlags.dropItemFlags);
  }

  onDropItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, quantityToDrop: number) => void) {
    this.connection.onReducer("drop_item", callback);
  }

  removeOnDropItem(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, quantityToDrop: number) => void) {
    this.connection.offReducer("drop_item", callback);
  }

  dropItemFromBoxSlotToWorld(boxId: number, slotIndex: number) {
    const __args = { boxId, slotIndex };
    let __writer = new BinaryWriter(1024);
    DropItemFromBoxSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item_from_box_slot_to_world", __argsBuffer, this.setCallReducerFlags.dropItemFromBoxSlotToWorldFlags);
  }

  onDropItemFromBoxSlotToWorld(callback: (ctx: ReducerEventContext, boxId: number, slotIndex: number) => void) {
    this.connection.onReducer("drop_item_from_box_slot_to_world", callback);
  }

  removeOnDropItemFromBoxSlotToWorld(callback: (ctx: ReducerEventContext, boxId: number, slotIndex: number) => void) {
    this.connection.offReducer("drop_item_from_box_slot_to_world", callback);
  }

  dropItemFromCampfireSlotToWorld(campfireId: number, slotIndex: number) {
    const __args = { campfireId, slotIndex };
    let __writer = new BinaryWriter(1024);
    DropItemFromCampfireSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item_from_campfire_slot_to_world", __argsBuffer, this.setCallReducerFlags.dropItemFromCampfireSlotToWorldFlags);
  }

  onDropItemFromCampfireSlotToWorld(callback: (ctx: ReducerEventContext, campfireId: number, slotIndex: number) => void) {
    this.connection.onReducer("drop_item_from_campfire_slot_to_world", callback);
  }

  removeOnDropItemFromCampfireSlotToWorld(callback: (ctx: ReducerEventContext, campfireId: number, slotIndex: number) => void) {
    this.connection.offReducer("drop_item_from_campfire_slot_to_world", callback);
  }

  dropItemFromCorpseSlotToWorld(corpseId: number, slotIndex: number) {
    const __args = { corpseId, slotIndex };
    let __writer = new BinaryWriter(1024);
    DropItemFromCorpseSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item_from_corpse_slot_to_world", __argsBuffer, this.setCallReducerFlags.dropItemFromCorpseSlotToWorldFlags);
  }

  onDropItemFromCorpseSlotToWorld(callback: (ctx: ReducerEventContext, corpseId: number, slotIndex: number) => void) {
    this.connection.onReducer("drop_item_from_corpse_slot_to_world", callback);
  }

  removeOnDropItemFromCorpseSlotToWorld(callback: (ctx: ReducerEventContext, corpseId: number, slotIndex: number) => void) {
    this.connection.offReducer("drop_item_from_corpse_slot_to_world", callback);
  }

  dropItemFromStashSlotToWorld(stashId: number, slotIndex: number) {
    const __args = { stashId, slotIndex };
    let __writer = new BinaryWriter(1024);
    DropItemFromStashSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("drop_item_from_stash_slot_to_world", __argsBuffer, this.setCallReducerFlags.dropItemFromStashSlotToWorldFlags);
  }

  onDropItemFromStashSlotToWorld(callback: (ctx: ReducerEventContext, stashId: number, slotIndex: number) => void) {
    this.connection.onReducer("drop_item_from_stash_slot_to_world", callback);
  }

  removeOnDropItemFromStashSlotToWorld(callback: (ctx: ReducerEventContext, stashId: number, slotIndex: number) => void) {
    this.connection.offReducer("drop_item_from_stash_slot_to_world", callback);
  }

  equipArmor(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    EquipArmor.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_armor", __argsBuffer, this.setCallReducerFlags.equipArmorFlags);
  }

  onEquipArmor(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("equip_armor", callback);
  }

  removeOnEquipArmor(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("equip_armor", callback);
  }

  equipArmorFromDrag(itemInstanceId: bigint, targetSlotName: string) {
    const __args = { itemInstanceId, targetSlotName };
    let __writer = new BinaryWriter(1024);
    EquipArmorFromDrag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_armor_from_drag", __argsBuffer, this.setCallReducerFlags.equipArmorFromDragFlags);
  }

  onEquipArmorFromDrag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetSlotName: string) => void) {
    this.connection.onReducer("equip_armor_from_drag", callback);
  }

  removeOnEquipArmorFromDrag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetSlotName: string) => void) {
    this.connection.offReducer("equip_armor_from_drag", callback);
  }

  equipArmorFromInventory(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    EquipArmorFromInventory.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("equip_armor_from_inventory", __argsBuffer, this.setCallReducerFlags.equipArmorFromInventoryFlags);
  }

  onEquipArmorFromInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("equip_armor_from_inventory", callback);
  }

  removeOnEquipArmorFromInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("equip_armor_from_inventory", callback);
  }

  finishFishing(success: boolean, caughtItems: string[]) {
    const __args = { success, caughtItems };
    let __writer = new BinaryWriter(1024);
    FinishFishing.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("finish_fishing", __argsBuffer, this.setCallReducerFlags.finishFishingFlags);
  }

  onFinishFishing(callback: (ctx: ReducerEventContext, success: boolean, caughtItems: string[]) => void) {
    this.connection.onReducer("finish_fishing", callback);
  }

  removeOnFinishFishing(callback: (ctx: ReducerEventContext, success: boolean, caughtItems: string[]) => void) {
    this.connection.offReducer("finish_fishing", callback);
  }

  fireProjectile(targetWorldX: number, targetWorldY: number) {
    const __args = { targetWorldX, targetWorldY };
    let __writer = new BinaryWriter(1024);
    FireProjectile.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("fire_projectile", __argsBuffer, this.setCallReducerFlags.fireProjectileFlags);
  }

  onFireProjectile(callback: (ctx: ReducerEventContext, targetWorldX: number, targetWorldY: number) => void) {
    this.connection.onReducer("fire_projectile", callback);
  }

  removeOnFireProjectile(callback: (ctx: ReducerEventContext, targetWorldX: number, targetWorldY: number) => void) {
    this.connection.offReducer("fire_projectile", callback);
  }

  generateDefaultWorld() {
    this.connection.callReducer("generate_default_world", new Uint8Array(0), this.setCallReducerFlags.generateDefaultWorldFlags);
  }

  onGenerateDefaultWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("generate_default_world", callback);
  }

  removeOnGenerateDefaultWorld(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("generate_default_world", callback);
  }

  generateMinimapData(minimapWidth: number, minimapHeight: number) {
    const __args = { minimapWidth, minimapHeight };
    let __writer = new BinaryWriter(1024);
    GenerateMinimapData.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("generate_minimap_data", __argsBuffer, this.setCallReducerFlags.generateMinimapDataFlags);
  }

  onGenerateMinimapData(callback: (ctx: ReducerEventContext, minimapWidth: number, minimapHeight: number) => void) {
    this.connection.onReducer("generate_minimap_data", callback);
  }

  removeOnGenerateMinimapData(callback: (ctx: ReducerEventContext, minimapWidth: number, minimapHeight: number) => void) {
    this.connection.offReducer("generate_minimap_data", callback);
  }

  generateWorld(config: WorldGenConfig) {
    const __args = { config };
    let __writer = new BinaryWriter(1024);
    GenerateWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("generate_world", __argsBuffer, this.setCallReducerFlags.generateWorldFlags);
  }

  onGenerateWorld(callback: (ctx: ReducerEventContext, config: WorldGenConfig) => void) {
    this.connection.onReducer("generate_world", callback);
  }

  removeOnGenerateWorld(callback: (ctx: ReducerEventContext, config: WorldGenConfig) => void) {
    this.connection.offReducer("generate_world", callback);
  }

  getKnockedOutStatus() {
    this.connection.callReducer("get_knocked_out_status", new Uint8Array(0), this.setCallReducerFlags.getKnockedOutStatusFlags);
  }

  onGetKnockedOutStatus(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("get_knocked_out_status", callback);
  }

  removeOnGetKnockedOutStatus(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("get_knocked_out_status", callback);
  }

  getMinimapData() {
    this.connection.callReducer("get_minimap_data", new Uint8Array(0), this.setCallReducerFlags.getMinimapDataFlags);
  }

  onGetMinimapData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("get_minimap_data", callback);
  }

  removeOnGetMinimapData(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("get_minimap_data", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  initProjectileSystem() {
    this.connection.callReducer("init_projectile_system", new Uint8Array(0), this.setCallReducerFlags.initProjectileSystemFlags);
  }

  onInitProjectileSystem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("init_projectile_system", callback);
  }

  removeOnInitProjectileSystem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("init_projectile_system", callback);
  }

  interactWithCampfire(campfireId: number) {
    const __args = { campfireId };
    let __writer = new BinaryWriter(1024);
    InteractWithCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_campfire", __argsBuffer, this.setCallReducerFlags.interactWithCampfireFlags);
  }

  onInteractWithCampfire(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.onReducer("interact_with_campfire", callback);
  }

  removeOnInteractWithCampfire(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.offReducer("interact_with_campfire", callback);
  }

  interactWithCorn(cornId: bigint) {
    const __args = { cornId };
    let __writer = new BinaryWriter(1024);
    InteractWithCorn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_corn", __argsBuffer, this.setCallReducerFlags.interactWithCornFlags);
  }

  onInteractWithCorn(callback: (ctx: ReducerEventContext, cornId: bigint) => void) {
    this.connection.onReducer("interact_with_corn", callback);
  }

  removeOnInteractWithCorn(callback: (ctx: ReducerEventContext, cornId: bigint) => void) {
    this.connection.offReducer("interact_with_corn", callback);
  }

  interactWithHemp(hempId: bigint) {
    const __args = { hempId };
    let __writer = new BinaryWriter(1024);
    InteractWithHemp.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_hemp", __argsBuffer, this.setCallReducerFlags.interactWithHempFlags);
  }

  onInteractWithHemp(callback: (ctx: ReducerEventContext, hempId: bigint) => void) {
    this.connection.onReducer("interact_with_hemp", callback);
  }

  removeOnInteractWithHemp(callback: (ctx: ReducerEventContext, hempId: bigint) => void) {
    this.connection.offReducer("interact_with_hemp", callback);
  }

  interactWithMushroom(mushroomId: bigint) {
    const __args = { mushroomId };
    let __writer = new BinaryWriter(1024);
    InteractWithMushroom.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_mushroom", __argsBuffer, this.setCallReducerFlags.interactWithMushroomFlags);
  }

  onInteractWithMushroom(callback: (ctx: ReducerEventContext, mushroomId: bigint) => void) {
    this.connection.onReducer("interact_with_mushroom", callback);
  }

  removeOnInteractWithMushroom(callback: (ctx: ReducerEventContext, mushroomId: bigint) => void) {
    this.connection.offReducer("interact_with_mushroom", callback);
  }

  interactWithPotato(potatoId: bigint) {
    const __args = { potatoId };
    let __writer = new BinaryWriter(1024);
    InteractWithPotato.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_potato", __argsBuffer, this.setCallReducerFlags.interactWithPotatoFlags);
  }

  onInteractWithPotato(callback: (ctx: ReducerEventContext, potatoId: bigint) => void) {
    this.connection.onReducer("interact_with_potato", callback);
  }

  removeOnInteractWithPotato(callback: (ctx: ReducerEventContext, potatoId: bigint) => void) {
    this.connection.offReducer("interact_with_potato", callback);
  }

  interactWithPumpkin(pumpkinId: bigint) {
    const __args = { pumpkinId };
    let __writer = new BinaryWriter(1024);
    InteractWithPumpkin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_pumpkin", __argsBuffer, this.setCallReducerFlags.interactWithPumpkinFlags);
  }

  onInteractWithPumpkin(callback: (ctx: ReducerEventContext, pumpkinId: bigint) => void) {
    this.connection.onReducer("interact_with_pumpkin", callback);
  }

  removeOnInteractWithPumpkin(callback: (ctx: ReducerEventContext, pumpkinId: bigint) => void) {
    this.connection.offReducer("interact_with_pumpkin", callback);
  }

  interactWithSleepingBag(bagId: number) {
    const __args = { bagId };
    let __writer = new BinaryWriter(1024);
    InteractWithSleepingBag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_sleeping_bag", __argsBuffer, this.setCallReducerFlags.interactWithSleepingBagFlags);
  }

  onInteractWithSleepingBag(callback: (ctx: ReducerEventContext, bagId: number) => void) {
    this.connection.onReducer("interact_with_sleeping_bag", callback);
  }

  removeOnInteractWithSleepingBag(callback: (ctx: ReducerEventContext, bagId: number) => void) {
    this.connection.offReducer("interact_with_sleeping_bag", callback);
  }

  interactWithStorageBox(boxId: number) {
    const __args = { boxId };
    let __writer = new BinaryWriter(1024);
    InteractWithStorageBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("interact_with_storage_box", __argsBuffer, this.setCallReducerFlags.interactWithStorageBoxFlags);
  }

  onInteractWithStorageBox(callback: (ctx: ReducerEventContext, boxId: number) => void) {
    this.connection.onReducer("interact_with_storage_box", callback);
  }

  removeOnInteractWithStorageBox(callback: (ctx: ReducerEventContext, boxId: number) => void) {
    this.connection.offReducer("interact_with_storage_box", callback);
  }

  jump() {
    this.connection.callReducer("jump", new Uint8Array(0), this.setCallReducerFlags.jumpFlags);
  }

  onJump(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("jump", callback);
  }

  removeOnJump(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("jump", callback);
  }

  loadRangedWeapon() {
    this.connection.callReducer("load_ranged_weapon", new Uint8Array(0), this.setCallReducerFlags.loadRangedWeaponFlags);
  }

  onLoadRangedWeapon(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("load_ranged_weapon", callback);
  }

  removeOnLoadRangedWeapon(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("load_ranged_weapon", callback);
  }

  moveFuelItemToPlayerSlot(campfireId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveFuelItemToPlayerSlot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_fuel_item_to_player_slot", __argsBuffer, this.setCallReducerFlags.moveFuelItemToPlayerSlotFlags);
  }

  onMoveFuelItemToPlayerSlot(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_fuel_item_to_player_slot", callback);
  }

  removeOnMoveFuelItemToPlayerSlot(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_fuel_item_to_player_slot", callback);
  }

  moveFuelWithinCampfire(campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveFuelWithinCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_fuel_within_campfire", __argsBuffer, this.setCallReducerFlags.moveFuelWithinCampfireFlags);
  }

  onMoveFuelWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_fuel_within_campfire", callback);
  }

  removeOnMoveFuelWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_fuel_within_campfire", callback);
  }

  moveItemFromBox(boxId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { boxId, sourceSlotIndex, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemFromBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_from_box", __argsBuffer, this.setCallReducerFlags.moveItemFromBoxFlags);
  }

  onMoveItemFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_from_box", callback);
  }

  removeOnMoveItemFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_from_box", callback);
  }

  moveItemFromCorpse(corpseId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { corpseId, sourceSlotIndex, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemFromCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_from_corpse", __argsBuffer, this.setCallReducerFlags.moveItemFromCorpseFlags);
  }

  onMoveItemFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_from_corpse", callback);
  }

  removeOnMoveItemFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_from_corpse", callback);
  }

  moveItemFromStash(stashId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { stashId, sourceSlotIndex, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemFromStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_from_stash", __argsBuffer, this.setCallReducerFlags.moveItemFromStashFlags);
  }

  onMoveItemFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_from_stash", callback);
  }

  removeOnMoveItemFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_from_stash", callback);
  }

  moveItemToBox(boxId: number, targetSlotIndex: number, itemInstanceId: bigint) {
    const __args = { boxId, targetSlotIndex, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    MoveItemToBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_box", __argsBuffer, this.setCallReducerFlags.moveItemToBoxFlags);
  }

  onMoveItemToBox(callback: (ctx: ReducerEventContext, boxId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("move_item_to_box", callback);
  }

  removeOnMoveItemToBox(callback: (ctx: ReducerEventContext, boxId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("move_item_to_box", callback);
  }

  moveItemToCorpse(corpseId: number, targetSlotIndex: number, itemInstanceId: bigint) {
    const __args = { corpseId, targetSlotIndex, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    MoveItemToCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_corpse", __argsBuffer, this.setCallReducerFlags.moveItemToCorpseFlags);
  }

  onMoveItemToCorpse(callback: (ctx: ReducerEventContext, corpseId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("move_item_to_corpse", callback);
  }

  removeOnMoveItemToCorpse(callback: (ctx: ReducerEventContext, corpseId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("move_item_to_corpse", callback);
  }

  moveItemToHotbar(itemInstanceId: bigint, targetHotbarSlot: number) {
    const __args = { itemInstanceId, targetHotbarSlot };
    let __writer = new BinaryWriter(1024);
    MoveItemToHotbar.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_hotbar", __argsBuffer, this.setCallReducerFlags.moveItemToHotbarFlags);
  }

  onMoveItemToHotbar(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetHotbarSlot: number) => void) {
    this.connection.onReducer("move_item_to_hotbar", callback);
  }

  removeOnMoveItemToHotbar(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetHotbarSlot: number) => void) {
    this.connection.offReducer("move_item_to_hotbar", callback);
  }

  moveItemToInventory(itemInstanceId: bigint, targetInventorySlot: number) {
    const __args = { itemInstanceId, targetInventorySlot };
    let __writer = new BinaryWriter(1024);
    MoveItemToInventory.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_inventory", __argsBuffer, this.setCallReducerFlags.moveItemToInventoryFlags);
  }

  onMoveItemToInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetInventorySlot: number) => void) {
    this.connection.onReducer("move_item_to_inventory", callback);
  }

  removeOnMoveItemToInventory(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, targetInventorySlot: number) => void) {
    this.connection.offReducer("move_item_to_inventory", callback);
  }

  moveItemToStash(stashId: number, targetSlotIndex: number, itemInstanceId: bigint) {
    const __args = { stashId, targetSlotIndex, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    MoveItemToStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_to_stash", __argsBuffer, this.setCallReducerFlags.moveItemToStashFlags);
  }

  onMoveItemToStash(callback: (ctx: ReducerEventContext, stashId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("move_item_to_stash", callback);
  }

  removeOnMoveItemToStash(callback: (ctx: ReducerEventContext, stashId: number, targetSlotIndex: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("move_item_to_stash", callback);
  }

  moveItemWithinBox(boxId: number, sourceSlotIndex: number, targetSlotIndex: number) {
    const __args = { boxId, sourceSlotIndex, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemWithinBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_within_box", __argsBuffer, this.setCallReducerFlags.moveItemWithinBoxFlags);
  }

  onMoveItemWithinBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_within_box", callback);
  }

  removeOnMoveItemWithinBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_within_box", callback);
  }

  moveItemWithinCorpse(corpseId: number, sourceSlotIndex: number, targetSlotIndex: number) {
    const __args = { corpseId, sourceSlotIndex, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemWithinCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_within_corpse", __argsBuffer, this.setCallReducerFlags.moveItemWithinCorpseFlags);
  }

  onMoveItemWithinCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_within_corpse", callback);
  }

  removeOnMoveItemWithinCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_within_corpse", callback);
  }

  moveItemWithinStash(stashId: number, sourceSlotIndex: number, targetSlotIndex: number) {
    const __args = { stashId, sourceSlotIndex, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    MoveItemWithinStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_item_within_stash", __argsBuffer, this.setCallReducerFlags.moveItemWithinStashFlags);
  }

  onMoveItemWithinStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("move_item_within_stash", callback);
  }

  removeOnMoveItemWithinStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("move_item_within_stash", callback);
  }

  moveToFirstAvailableHotbarSlot(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    MoveToFirstAvailableHotbarSlot.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_to_first_available_hotbar_slot", __argsBuffer, this.setCallReducerFlags.moveToFirstAvailableHotbarSlotFlags);
  }

  onMoveToFirstAvailableHotbarSlot(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("move_to_first_available_hotbar_slot", callback);
  }

  removeOnMoveToFirstAvailableHotbarSlot(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("move_to_first_available_hotbar_slot", callback);
  }

  pickupDroppedItem(droppedItemId: bigint) {
    const __args = { droppedItemId };
    let __writer = new BinaryWriter(1024);
    PickupDroppedItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pickup_dropped_item", __argsBuffer, this.setCallReducerFlags.pickupDroppedItemFlags);
  }

  onPickupDroppedItem(callback: (ctx: ReducerEventContext, droppedItemId: bigint) => void) {
    this.connection.onReducer("pickup_dropped_item", callback);
  }

  removeOnPickupDroppedItem(callback: (ctx: ReducerEventContext, droppedItemId: bigint) => void) {
    this.connection.offReducer("pickup_dropped_item", callback);
  }

  pickupStorageBox(boxId: number) {
    const __args = { boxId };
    let __writer = new BinaryWriter(1024);
    PickupStorageBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("pickup_storage_box", __argsBuffer, this.setCallReducerFlags.pickupStorageBoxFlags);
  }

  onPickupStorageBox(callback: (ctx: ReducerEventContext, boxId: number) => void) {
    this.connection.onReducer("pickup_storage_box", callback);
  }

  removeOnPickupStorageBox(callback: (ctx: ReducerEventContext, boxId: number) => void) {
    this.connection.offReducer("pickup_storage_box", callback);
  }

  placeCampfire(itemInstanceId: bigint, worldX: number, worldY: number) {
    const __args = { itemInstanceId, worldX, worldY };
    let __writer = new BinaryWriter(1024);
    PlaceCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_campfire", __argsBuffer, this.setCallReducerFlags.placeCampfireFlags);
  }

  onPlaceCampfire(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.onReducer("place_campfire", callback);
  }

  removeOnPlaceCampfire(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.offReducer("place_campfire", callback);
  }

  placeShelter(itemInstanceId: bigint, worldX: number, worldY: number) {
    const __args = { itemInstanceId, worldX, worldY };
    let __writer = new BinaryWriter(1024);
    PlaceShelter.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_shelter", __argsBuffer, this.setCallReducerFlags.placeShelterFlags);
  }

  onPlaceShelter(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.onReducer("place_shelter", callback);
  }

  removeOnPlaceShelter(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.offReducer("place_shelter", callback);
  }

  placeSleepingBag(itemInstanceId: bigint, worldX: number, worldY: number) {
    const __args = { itemInstanceId, worldX, worldY };
    let __writer = new BinaryWriter(1024);
    PlaceSleepingBag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_sleeping_bag", __argsBuffer, this.setCallReducerFlags.placeSleepingBagFlags);
  }

  onPlaceSleepingBag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.onReducer("place_sleeping_bag", callback);
  }

  removeOnPlaceSleepingBag(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.offReducer("place_sleeping_bag", callback);
  }

  placeStash(itemInstanceId: bigint, worldX: number, worldY: number) {
    const __args = { itemInstanceId, worldX, worldY };
    let __writer = new BinaryWriter(1024);
    PlaceStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_stash", __argsBuffer, this.setCallReducerFlags.placeStashFlags);
  }

  onPlaceStash(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.onReducer("place_stash", callback);
  }

  removeOnPlaceStash(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.offReducer("place_stash", callback);
  }

  placeWoodenStorageBox(itemInstanceId: bigint, worldX: number, worldY: number) {
    const __args = { itemInstanceId, worldX, worldY };
    let __writer = new BinaryWriter(1024);
    PlaceWoodenStorageBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("place_wooden_storage_box", __argsBuffer, this.setCallReducerFlags.placeWoodenStorageBoxFlags);
  }

  onPlaceWoodenStorageBox(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.onReducer("place_wooden_storage_box", callback);
  }

  removeOnPlaceWoodenStorageBox(callback: (ctx: ReducerEventContext, itemInstanceId: bigint, worldX: number, worldY: number) => void) {
    this.connection.offReducer("place_wooden_storage_box", callback);
  }

  processActiveConsumableEffectsTick(args: ProcessEffectsSchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    ProcessActiveConsumableEffectsTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_active_consumable_effects_tick", __argsBuffer, this.setCallReducerFlags.processActiveConsumableEffectsTickFlags);
  }

  onProcessActiveConsumableEffectsTick(callback: (ctx: ReducerEventContext, args: ProcessEffectsSchedule) => void) {
    this.connection.onReducer("process_active_consumable_effects_tick", callback);
  }

  removeOnProcessActiveConsumableEffectsTick(callback: (ctx: ReducerEventContext, args: ProcessEffectsSchedule) => void) {
    this.connection.offReducer("process_active_consumable_effects_tick", callback);
  }

  processCampfireLogicScheduled(scheduleArgs: CampfireProcessingSchedule) {
    const __args = { scheduleArgs };
    let __writer = new BinaryWriter(1024);
    ProcessCampfireLogicScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_campfire_logic_scheduled", __argsBuffer, this.setCallReducerFlags.processCampfireLogicScheduledFlags);
  }

  onProcessCampfireLogicScheduled(callback: (ctx: ReducerEventContext, scheduleArgs: CampfireProcessingSchedule) => void) {
    this.connection.onReducer("process_campfire_logic_scheduled", callback);
  }

  removeOnProcessCampfireLogicScheduled(callback: (ctx: ReducerEventContext, scheduleArgs: CampfireProcessingSchedule) => void) {
    this.connection.offReducer("process_campfire_logic_scheduled", callback);
  }

  processCorpseDespawn(args: PlayerCorpseDespawnSchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    ProcessCorpseDespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_corpse_despawn", __argsBuffer, this.setCallReducerFlags.processCorpseDespawnFlags);
  }

  onProcessCorpseDespawn(callback: (ctx: ReducerEventContext, args: PlayerCorpseDespawnSchedule) => void) {
    this.connection.onReducer("process_corpse_despawn", callback);
  }

  removeOnProcessCorpseDespawn(callback: (ctx: ReducerEventContext, args: PlayerCorpseDespawnSchedule) => void) {
    this.connection.offReducer("process_corpse_despawn", callback);
  }

  processGlobalTick(schedule: GlobalTickSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    ProcessGlobalTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_global_tick", __argsBuffer, this.setCallReducerFlags.processGlobalTickFlags);
  }

  onProcessGlobalTick(callback: (ctx: ReducerEventContext, schedule: GlobalTickSchedule) => void) {
    this.connection.onReducer("process_global_tick", callback);
  }

  removeOnProcessGlobalTick(callback: (ctx: ReducerEventContext, schedule: GlobalTickSchedule) => void) {
    this.connection.offReducer("process_global_tick", callback);
  }

  processGrassRespawn(scheduleEntry: GrassRespawnSchedule) {
    const __args = { scheduleEntry };
    let __writer = new BinaryWriter(1024);
    ProcessGrassRespawn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_grass_respawn", __argsBuffer, this.setCallReducerFlags.processGrassRespawnFlags);
  }

  onProcessGrassRespawn(callback: (ctx: ReducerEventContext, scheduleEntry: GrassRespawnSchedule) => void) {
    this.connection.onReducer("process_grass_respawn", callback);
  }

  removeOnProcessGrassRespawn(callback: (ctx: ReducerEventContext, scheduleEntry: GrassRespawnSchedule) => void) {
    this.connection.offReducer("process_grass_respawn", callback);
  }

  processKnockedOutRecovery(args: KnockedOutRecoverySchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    ProcessKnockedOutRecovery.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_knocked_out_recovery", __argsBuffer, this.setCallReducerFlags.processKnockedOutRecoveryFlags);
  }

  onProcessKnockedOutRecovery(callback: (ctx: ReducerEventContext, args: KnockedOutRecoverySchedule) => void) {
    this.connection.onReducer("process_knocked_out_recovery", callback);
  }

  removeOnProcessKnockedOutRecovery(callback: (ctx: ReducerEventContext, args: KnockedOutRecoverySchedule) => void) {
    this.connection.offReducer("process_knocked_out_recovery", callback);
  }

  processPlayerStats(schedule: PlayerStatSchedule) {
    const __args = { schedule };
    let __writer = new BinaryWriter(1024);
    ProcessPlayerStats.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("process_player_stats", __argsBuffer, this.setCallReducerFlags.processPlayerStatsFlags);
  }

  onProcessPlayerStats(callback: (ctx: ReducerEventContext, schedule: PlayerStatSchedule) => void) {
    this.connection.onReducer("process_player_stats", callback);
  }

  removeOnProcessPlayerStats(callback: (ctx: ReducerEventContext, schedule: PlayerStatSchedule) => void) {
    this.connection.offReducer("process_player_stats", callback);
  }

  quickMoveFromBox(boxId: number, sourceSlotIndex: number) {
    const __args = { boxId, sourceSlotIndex };
    let __writer = new BinaryWriter(1024);
    QuickMoveFromBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_from_box", __argsBuffer, this.setCallReducerFlags.quickMoveFromBoxFlags);
  }

  onQuickMoveFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number) => void) {
    this.connection.onReducer("quick_move_from_box", callback);
  }

  removeOnQuickMoveFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number) => void) {
    this.connection.offReducer("quick_move_from_box", callback);
  }

  quickMoveFromCorpse(corpseId: number, sourceSlotIndex: number) {
    const __args = { corpseId, sourceSlotIndex };
    let __writer = new BinaryWriter(1024);
    QuickMoveFromCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_from_corpse", __argsBuffer, this.setCallReducerFlags.quickMoveFromCorpseFlags);
  }

  onQuickMoveFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number) => void) {
    this.connection.onReducer("quick_move_from_corpse", callback);
  }

  removeOnQuickMoveFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number) => void) {
    this.connection.offReducer("quick_move_from_corpse", callback);
  }

  quickMoveFromStash(stashId: number, sourceSlotIndex: number) {
    const __args = { stashId, sourceSlotIndex };
    let __writer = new BinaryWriter(1024);
    QuickMoveFromStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_from_stash", __argsBuffer, this.setCallReducerFlags.quickMoveFromStashFlags);
  }

  onQuickMoveFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number) => void) {
    this.connection.onReducer("quick_move_from_stash", callback);
  }

  removeOnQuickMoveFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number) => void) {
    this.connection.offReducer("quick_move_from_stash", callback);
  }

  quickMoveToBox(boxId: number, itemInstanceId: bigint) {
    const __args = { boxId, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    QuickMoveToBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_to_box", __argsBuffer, this.setCallReducerFlags.quickMoveToBoxFlags);
  }

  onQuickMoveToBox(callback: (ctx: ReducerEventContext, boxId: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("quick_move_to_box", callback);
  }

  removeOnQuickMoveToBox(callback: (ctx: ReducerEventContext, boxId: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("quick_move_to_box", callback);
  }

  quickMoveToCampfire(campfireId: number, itemInstanceId: bigint) {
    const __args = { campfireId, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    QuickMoveToCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_to_campfire", __argsBuffer, this.setCallReducerFlags.quickMoveToCampfireFlags);
  }

  onQuickMoveToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("quick_move_to_campfire", callback);
  }

  removeOnQuickMoveToCampfire(callback: (ctx: ReducerEventContext, campfireId: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("quick_move_to_campfire", callback);
  }

  quickMoveToCorpse(corpseId: number, itemInstanceId: bigint) {
    const __args = { corpseId, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    QuickMoveToCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_to_corpse", __argsBuffer, this.setCallReducerFlags.quickMoveToCorpseFlags);
  }

  onQuickMoveToCorpse(callback: (ctx: ReducerEventContext, corpseId: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("quick_move_to_corpse", callback);
  }

  removeOnQuickMoveToCorpse(callback: (ctx: ReducerEventContext, corpseId: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("quick_move_to_corpse", callback);
  }

  quickMoveToStash(stashId: number, itemInstanceId: bigint) {
    const __args = { stashId, itemInstanceId };
    let __writer = new BinaryWriter(1024);
    QuickMoveToStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("quick_move_to_stash", __argsBuffer, this.setCallReducerFlags.quickMoveToStashFlags);
  }

  onQuickMoveToStash(callback: (ctx: ReducerEventContext, stashId: number, itemInstanceId: bigint) => void) {
    this.connection.onReducer("quick_move_to_stash", callback);
  }

  removeOnQuickMoveToStash(callback: (ctx: ReducerEventContext, stashId: number, itemInstanceId: bigint) => void) {
    this.connection.offReducer("quick_move_to_stash", callback);
  }

  regenerateCompressedChunks() {
    this.connection.callReducer("regenerate_compressed_chunks", new Uint8Array(0), this.setCallReducerFlags.regenerateCompressedChunksFlags);
  }

  onRegenerateCompressedChunks(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("regenerate_compressed_chunks", callback);
  }

  removeOnRegenerateCompressedChunks(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("regenerate_compressed_chunks", callback);
  }

  registerPlayer(username: string) {
    const __args = { username };
    let __writer = new BinaryWriter(1024);
    RegisterPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, username: string) => void) {
    this.connection.offReducer("register_player", callback);
  }

  respawnAtSleepingBag(bagId: number) {
    const __args = { bagId };
    let __writer = new BinaryWriter(1024);
    RespawnAtSleepingBag.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("respawn_at_sleeping_bag", __argsBuffer, this.setCallReducerFlags.respawnAtSleepingBagFlags);
  }

  onRespawnAtSleepingBag(callback: (ctx: ReducerEventContext, bagId: number) => void) {
    this.connection.onReducer("respawn_at_sleeping_bag", callback);
  }

  removeOnRespawnAtSleepingBag(callback: (ctx: ReducerEventContext, bagId: number) => void) {
    this.connection.offReducer("respawn_at_sleeping_bag", callback);
  }

  respawnRandomly() {
    this.connection.callReducer("respawn_randomly", new Uint8Array(0), this.setCallReducerFlags.respawnRandomlyFlags);
  }

  onRespawnRandomly(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("respawn_randomly", callback);
  }

  removeOnRespawnRandomly(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("respawn_randomly", callback);
  }

  reviveKnockedOutPlayer(targetPlayerId: Identity) {
    const __args = { targetPlayerId };
    let __writer = new BinaryWriter(1024);
    ReviveKnockedOutPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("revive_knocked_out_player", __argsBuffer, this.setCallReducerFlags.reviveKnockedOutPlayerFlags);
  }

  onReviveKnockedOutPlayer(callback: (ctx: ReducerEventContext, targetPlayerId: Identity) => void) {
    this.connection.onReducer("revive_knocked_out_player", callback);
  }

  removeOnReviveKnockedOutPlayer(callback: (ctx: ReducerEventContext, targetPlayerId: Identity) => void) {
    this.connection.offReducer("revive_knocked_out_player", callback);
  }

  scheduleNextCampfireProcessing(campfireId: number) {
    const __args = { campfireId };
    let __writer = new BinaryWriter(1024);
    ScheduleNextCampfireProcessing.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("schedule_next_campfire_processing", __argsBuffer, this.setCallReducerFlags.scheduleNextCampfireProcessingFlags);
  }

  onScheduleNextCampfireProcessing(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.onReducer("schedule_next_campfire_processing", callback);
  }

  removeOnScheduleNextCampfireProcessing(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.offReducer("schedule_next_campfire_processing", callback);
  }

  seedEnvironment() {
    this.connection.callReducer("seed_environment", new Uint8Array(0), this.setCallReducerFlags.seedEnvironmentFlags);
  }

  onSeedEnvironment(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_environment", callback);
  }

  removeOnSeedEnvironment(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_environment", callback);
  }

  seedItems() {
    this.connection.callReducer("seed_items", new Uint8Array(0), this.setCallReducerFlags.seedItemsFlags);
  }

  onSeedItems(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_items", callback);
  }

  removeOnSeedItems(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_items", callback);
  }

  seedRangedWeaponStats() {
    this.connection.callReducer("seed_ranged_weapon_stats", new Uint8Array(0), this.setCallReducerFlags.seedRangedWeaponStatsFlags);
  }

  onSeedRangedWeaponStats(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_ranged_weapon_stats", callback);
  }

  removeOnSeedRangedWeaponStats(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_ranged_weapon_stats", callback);
  }

  seedRecipes() {
    this.connection.callReducer("seed_recipes", new Uint8Array(0), this.setCallReducerFlags.seedRecipesFlags);
  }

  onSeedRecipes(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_recipes", callback);
  }

  removeOnSeedRecipes(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_recipes", callback);
  }

  seedWorldState() {
    this.connection.callReducer("seed_world_state", new Uint8Array(0), this.setCallReducerFlags.seedWorldStateFlags);
  }

  onSeedWorldState(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("seed_world_state", callback);
  }

  removeOnSeedWorldState(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("seed_world_state", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new BinaryWriter(1024);
    SendMessage.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setActiveItemReducer(itemInstanceId: bigint) {
    const __args = { itemInstanceId };
    let __writer = new BinaryWriter(1024);
    SetActiveItemReducer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_active_item_reducer", __argsBuffer, this.setCallReducerFlags.setActiveItemReducerFlags);
  }

  onSetActiveItemReducer(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.onReducer("set_active_item_reducer", callback);
  }

  removeOnSetActiveItemReducer(callback: (ctx: ReducerEventContext, itemInstanceId: bigint) => void) {
    this.connection.offReducer("set_active_item_reducer", callback);
  }

  setPlayerPin(pinX: number, pinY: number) {
    const __args = { pinX, pinY };
    let __writer = new BinaryWriter(1024);
    SetPlayerPin.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_player_pin", __argsBuffer, this.setCallReducerFlags.setPlayerPinFlags);
  }

  onSetPlayerPin(callback: (ctx: ReducerEventContext, pinX: number, pinY: number) => void) {
    this.connection.onReducer("set_player_pin", callback);
  }

  removeOnSetPlayerPin(callback: (ctx: ReducerEventContext, pinX: number, pinY: number) => void) {
    this.connection.offReducer("set_player_pin", callback);
  }

  setSprinting(sprinting: boolean) {
    const __args = { sprinting };
    let __writer = new BinaryWriter(1024);
    SetSprinting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_sprinting", __argsBuffer, this.setCallReducerFlags.setSprintingFlags);
  }

  onSetSprinting(callback: (ctx: ReducerEventContext, sprinting: boolean) => void) {
    this.connection.onReducer("set_sprinting", callback);
  }

  removeOnSetSprinting(callback: (ctx: ReducerEventContext, sprinting: boolean) => void) {
    this.connection.offReducer("set_sprinting", callback);
  }

  splitAndDropItemFromBoxSlotToWorld(boxId: number, slotIndex: number, quantityToSplit: number) {
    const __args = { boxId, slotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitAndDropItemFromBoxSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_and_drop_item_from_box_slot_to_world", __argsBuffer, this.setCallReducerFlags.splitAndDropItemFromBoxSlotToWorldFlags);
  }

  onSplitAndDropItemFromBoxSlotToWorld(callback: (ctx: ReducerEventContext, boxId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_and_drop_item_from_box_slot_to_world", callback);
  }

  removeOnSplitAndDropItemFromBoxSlotToWorld(callback: (ctx: ReducerEventContext, boxId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_and_drop_item_from_box_slot_to_world", callback);
  }

  splitAndDropItemFromCampfireSlotToWorld(campfireId: number, slotIndex: number, quantityToSplit: number) {
    const __args = { campfireId, slotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitAndDropItemFromCampfireSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_and_drop_item_from_campfire_slot_to_world", __argsBuffer, this.setCallReducerFlags.splitAndDropItemFromCampfireSlotToWorldFlags);
  }

  onSplitAndDropItemFromCampfireSlotToWorld(callback: (ctx: ReducerEventContext, campfireId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_and_drop_item_from_campfire_slot_to_world", callback);
  }

  removeOnSplitAndDropItemFromCampfireSlotToWorld(callback: (ctx: ReducerEventContext, campfireId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_and_drop_item_from_campfire_slot_to_world", callback);
  }

  splitAndDropItemFromCorpseSlotToWorld(corpseId: number, slotIndex: number, quantityToSplit: number) {
    const __args = { corpseId, slotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitAndDropItemFromCorpseSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_and_drop_item_from_corpse_slot_to_world", __argsBuffer, this.setCallReducerFlags.splitAndDropItemFromCorpseSlotToWorldFlags);
  }

  onSplitAndDropItemFromCorpseSlotToWorld(callback: (ctx: ReducerEventContext, corpseId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_and_drop_item_from_corpse_slot_to_world", callback);
  }

  removeOnSplitAndDropItemFromCorpseSlotToWorld(callback: (ctx: ReducerEventContext, corpseId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_and_drop_item_from_corpse_slot_to_world", callback);
  }

  splitAndDropItemFromStashSlotToWorld(stashId: number, slotIndex: number, quantityToSplit: number) {
    const __args = { stashId, slotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitAndDropItemFromStashSlotToWorld.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_and_drop_item_from_stash_slot_to_world", __argsBuffer, this.setCallReducerFlags.splitAndDropItemFromStashSlotToWorldFlags);
  }

  onSplitAndDropItemFromStashSlotToWorld(callback: (ctx: ReducerEventContext, stashId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_and_drop_item_from_stash_slot_to_world", callback);
  }

  removeOnSplitAndDropItemFromStashSlotToWorld(callback: (ctx: ReducerEventContext, stashId: number, slotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_and_drop_item_from_stash_slot_to_world", callback);
  }

  splitAndMoveFromCampfire(sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { sourceCampfireId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitAndMoveFromCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_and_move_from_campfire", __argsBuffer, this.setCallReducerFlags.splitAndMoveFromCampfireFlags);
  }

  onSplitAndMoveFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_and_move_from_campfire", callback);
  }

  removeOnSplitAndMoveFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_and_move_from_campfire", callback);
  }

  splitStack(sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { sourceItemInstanceId, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStack.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack", __argsBuffer, this.setCallReducerFlags.splitStackFlags);
  }

  onSplitStack(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack", callback);
  }

  removeOnSplitStack(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack", callback);
  }

  splitStackFromBox(boxId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { boxId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackFromBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_from_box", __argsBuffer, this.setCallReducerFlags.splitStackFromBoxFlags);
  }

  onSplitStackFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_from_box", callback);
  }

  removeOnSplitStackFromBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_from_box", callback);
  }

  splitStackFromCampfire(sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { sourceCampfireId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackFromCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_from_campfire", __argsBuffer, this.setCallReducerFlags.splitStackFromCampfireFlags);
  }

  onSplitStackFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_from_campfire", callback);
  }

  removeOnSplitStackFromCampfire(callback: (ctx: ReducerEventContext, sourceCampfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_from_campfire", callback);
  }

  splitStackFromCorpse(corpseId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { corpseId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackFromCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_from_corpse", __argsBuffer, this.setCallReducerFlags.splitStackFromCorpseFlags);
  }

  onSplitStackFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_from_corpse", callback);
  }

  removeOnSplitStackFromCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_from_corpse", callback);
  }

  splitStackFromStash(stashId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) {
    const __args = { stashId, sourceSlotIndex, quantityToSplit, targetSlotType, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackFromStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_from_stash", __argsBuffer, this.setCallReducerFlags.splitStackFromStashFlags);
  }

  onSplitStackFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_from_stash", callback);
  }

  removeOnSplitStackFromStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotType: string, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_from_stash", callback);
  }

  splitStackIntoBox(boxId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) {
    const __args = { boxId, targetSlotIndex, sourceItemInstanceId, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackIntoBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_into_box", __argsBuffer, this.setCallReducerFlags.splitStackIntoBoxFlags);
  }

  onSplitStackIntoBox(callback: (ctx: ReducerEventContext, boxId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_into_box", callback);
  }

  removeOnSplitStackIntoBox(callback: (ctx: ReducerEventContext, boxId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_into_box", callback);
  }

  splitStackIntoCampfire(sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) {
    const __args = { sourceItemInstanceId, quantityToSplit, targetCampfireId, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackIntoCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_into_campfire", __argsBuffer, this.setCallReducerFlags.splitStackIntoCampfireFlags);
  }

  onSplitStackIntoCampfire(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_into_campfire", callback);
  }

  removeOnSplitStackIntoCampfire(callback: (ctx: ReducerEventContext, sourceItemInstanceId: bigint, quantityToSplit: number, targetCampfireId: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_into_campfire", callback);
  }

  splitStackIntoCorpse(corpseId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) {
    const __args = { corpseId, targetSlotIndex, sourceItemInstanceId, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackIntoCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_into_corpse", __argsBuffer, this.setCallReducerFlags.splitStackIntoCorpseFlags);
  }

  onSplitStackIntoCorpse(callback: (ctx: ReducerEventContext, corpseId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_into_corpse", callback);
  }

  removeOnSplitStackIntoCorpse(callback: (ctx: ReducerEventContext, corpseId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_into_corpse", callback);
  }

  splitStackIntoStash(stashId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) {
    const __args = { stashId, targetSlotIndex, sourceItemInstanceId, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackIntoStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_into_stash", __argsBuffer, this.setCallReducerFlags.splitStackIntoStashFlags);
  }

  onSplitStackIntoStash(callback: (ctx: ReducerEventContext, stashId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_into_stash", callback);
  }

  removeOnSplitStackIntoStash(callback: (ctx: ReducerEventContext, stashId: number, targetSlotIndex: number, sourceItemInstanceId: bigint, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_into_stash", callback);
  }

  splitStackWithinBox(boxId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) {
    const __args = { boxId, sourceSlotIndex, targetSlotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackWithinBox.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_within_box", __argsBuffer, this.setCallReducerFlags.splitStackWithinBoxFlags);
  }

  onSplitStackWithinBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_within_box", callback);
  }

  removeOnSplitStackWithinBox(callback: (ctx: ReducerEventContext, boxId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_within_box", callback);
  }

  splitStackWithinCampfire(campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) {
    const __args = { campfireId, sourceSlotIndex, quantityToSplit, targetSlotIndex };
    let __writer = new BinaryWriter(1024);
    SplitStackWithinCampfire.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_within_campfire", __argsBuffer, this.setCallReducerFlags.splitStackWithinCampfireFlags);
  }

  onSplitStackWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) => void) {
    this.connection.onReducer("split_stack_within_campfire", callback);
  }

  removeOnSplitStackWithinCampfire(callback: (ctx: ReducerEventContext, campfireId: number, sourceSlotIndex: number, quantityToSplit: number, targetSlotIndex: number) => void) {
    this.connection.offReducer("split_stack_within_campfire", callback);
  }

  splitStackWithinCorpse(corpseId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) {
    const __args = { corpseId, sourceSlotIndex, targetSlotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackWithinCorpse.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_within_corpse", __argsBuffer, this.setCallReducerFlags.splitStackWithinCorpseFlags);
  }

  onSplitStackWithinCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_within_corpse", callback);
  }

  removeOnSplitStackWithinCorpse(callback: (ctx: ReducerEventContext, corpseId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_within_corpse", callback);
  }

  splitStackWithinStash(stashId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) {
    const __args = { stashId, sourceSlotIndex, targetSlotIndex, quantityToSplit };
    let __writer = new BinaryWriter(1024);
    SplitStackWithinStash.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("split_stack_within_stash", __argsBuffer, this.setCallReducerFlags.splitStackWithinStashFlags);
  }

  onSplitStackWithinStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.onReducer("split_stack_within_stash", callback);
  }

  removeOnSplitStackWithinStash(callback: (ctx: ReducerEventContext, stashId: number, sourceSlotIndex: number, targetSlotIndex: number, quantityToSplit: number) => void) {
    this.connection.offReducer("split_stack_within_stash", callback);
  }

  startCrafting(recipeId: bigint) {
    const __args = { recipeId };
    let __writer = new BinaryWriter(1024);
    StartCrafting.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_crafting", __argsBuffer, this.setCallReducerFlags.startCraftingFlags);
  }

  onStartCrafting(callback: (ctx: ReducerEventContext, recipeId: bigint) => void) {
    this.connection.onReducer("start_crafting", callback);
  }

  removeOnStartCrafting(callback: (ctx: ReducerEventContext, recipeId: bigint) => void) {
    this.connection.offReducer("start_crafting", callback);
  }

  startCraftingMultiple(recipeId: bigint, quantityToCraft: number) {
    const __args = { recipeId, quantityToCraft };
    let __writer = new BinaryWriter(1024);
    StartCraftingMultiple.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_crafting_multiple", __argsBuffer, this.setCallReducerFlags.startCraftingMultipleFlags);
  }

  onStartCraftingMultiple(callback: (ctx: ReducerEventContext, recipeId: bigint, quantityToCraft: number) => void) {
    this.connection.onReducer("start_crafting_multiple", callback);
  }

  removeOnStartCraftingMultiple(callback: (ctx: ReducerEventContext, recipeId: bigint, quantityToCraft: number) => void) {
    this.connection.offReducer("start_crafting_multiple", callback);
  }

  throwItem(targetWorldX: number, targetWorldY: number) {
    const __args = { targetWorldX, targetWorldY };
    let __writer = new BinaryWriter(1024);
    ThrowItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("throw_item", __argsBuffer, this.setCallReducerFlags.throwItemFlags);
  }

  onThrowItem(callback: (ctx: ReducerEventContext, targetWorldX: number, targetWorldY: number) => void) {
    this.connection.onReducer("throw_item", callback);
  }

  removeOnThrowItem(callback: (ctx: ReducerEventContext, targetWorldX: number, targetWorldY: number) => void) {
    this.connection.offReducer("throw_item", callback);
  }

  tickWorldState(timestamp: Timestamp) {
    const __args = { timestamp };
    let __writer = new BinaryWriter(1024);
    TickWorldState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("tick_world_state", __argsBuffer, this.setCallReducerFlags.tickWorldStateFlags);
  }

  onTickWorldState(callback: (ctx: ReducerEventContext, timestamp: Timestamp) => void) {
    this.connection.onReducer("tick_world_state", callback);
  }

  removeOnTickWorldState(callback: (ctx: ReducerEventContext, timestamp: Timestamp) => void) {
    this.connection.offReducer("tick_world_state", callback);
  }

  toggleCampfireBurning(campfireId: number) {
    const __args = { campfireId };
    let __writer = new BinaryWriter(1024);
    ToggleCampfireBurning.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("toggle_campfire_burning", __argsBuffer, this.setCallReducerFlags.toggleCampfireBurningFlags);
  }

  onToggleCampfireBurning(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.onReducer("toggle_campfire_burning", callback);
  }

  removeOnToggleCampfireBurning(callback: (ctx: ReducerEventContext, campfireId: number) => void) {
    this.connection.offReducer("toggle_campfire_burning", callback);
  }

  toggleCrouch() {
    this.connection.callReducer("toggle_crouch", new Uint8Array(0), this.setCallReducerFlags.toggleCrouchFlags);
  }

  onToggleCrouch(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("toggle_crouch", callback);
  }

  removeOnToggleCrouch(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("toggle_crouch", callback);
  }

  toggleStashVisibility(stashId: number) {
    const __args = { stashId };
    let __writer = new BinaryWriter(1024);
    ToggleStashVisibility.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("toggle_stash_visibility", __argsBuffer, this.setCallReducerFlags.toggleStashVisibilityFlags);
  }

  onToggleStashVisibility(callback: (ctx: ReducerEventContext, stashId: number) => void) {
    this.connection.onReducer("toggle_stash_visibility", callback);
  }

  removeOnToggleStashVisibility(callback: (ctx: ReducerEventContext, stashId: number) => void) {
    this.connection.offReducer("toggle_stash_visibility", callback);
  }

  toggleTorch() {
    this.connection.callReducer("toggle_torch", new Uint8Array(0), this.setCallReducerFlags.toggleTorchFlags);
  }

  onToggleTorch(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("toggle_torch", callback);
  }

  removeOnToggleTorch(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("toggle_torch", callback);
  }

  updateCloudPositions(scheduleArgs: CloudUpdateSchedule) {
    const __args = { scheduleArgs };
    let __writer = new BinaryWriter(1024);
    UpdateCloudPositions.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_cloud_positions", __argsBuffer, this.setCallReducerFlags.updateCloudPositionsFlags);
  }

  onUpdateCloudPositions(callback: (ctx: ReducerEventContext, scheduleArgs: CloudUpdateSchedule) => void) {
    this.connection.onReducer("update_cloud_positions", callback);
  }

  removeOnUpdateCloudPositions(callback: (ctx: ReducerEventContext, scheduleArgs: CloudUpdateSchedule) => void) {
    this.connection.offReducer("update_cloud_positions", callback);
  }

  updatePlayerFacingDirection(mouseWorldX: number, mouseWorldY: number) {
    const __args = { mouseWorldX, mouseWorldY };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerFacingDirection.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_facing_direction", __argsBuffer, this.setCallReducerFlags.updatePlayerFacingDirectionFlags);
  }

  onUpdatePlayerFacingDirection(callback: (ctx: ReducerEventContext, mouseWorldX: number, mouseWorldY: number) => void) {
    this.connection.onReducer("update_player_facing_direction", callback);
  }

  removeOnUpdatePlayerFacingDirection(callback: (ctx: ReducerEventContext, mouseWorldX: number, mouseWorldY: number) => void) {
    this.connection.offReducer("update_player_facing_direction", callback);
  }

  updatePlayerPositionSimple(newX: number, newY: number, clientTimestampMs: bigint, isSprinting: boolean, facingDirection: string) {
    const __args = { newX, newY, clientTimestampMs, isSprinting, facingDirection };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerPositionSimple.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_position_simple", __argsBuffer, this.setCallReducerFlags.updatePlayerPositionSimpleFlags);
  }

  onUpdatePlayerPositionSimple(callback: (ctx: ReducerEventContext, newX: number, newY: number, clientTimestampMs: bigint, isSprinting: boolean, facingDirection: string) => void) {
    this.connection.onReducer("update_player_position_simple", callback);
  }

  removeOnUpdatePlayerPositionSimple(callback: (ctx: ReducerEventContext, newX: number, newY: number, clientTimestampMs: bigint, isSprinting: boolean, facingDirection: string) => void) {
    this.connection.offReducer("update_player_position_simple", callback);
  }

  updateProjectiles(args: ProjectileUpdateSchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    UpdateProjectiles.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_projectiles", __argsBuffer, this.setCallReducerFlags.updateProjectilesFlags);
  }

  onUpdateProjectiles(callback: (ctx: ReducerEventContext, args: ProjectileUpdateSchedule) => void) {
    this.connection.onReducer("update_projectiles", callback);
  }

  removeOnUpdateProjectiles(callback: (ctx: ReducerEventContext, args: ProjectileUpdateSchedule) => void) {
    this.connection.offReducer("update_projectiles", callback);
  }

  updateViewport(minX: number, minY: number, maxX: number, maxY: number) {
    const __args = { minX, minY, maxX, maxY };
    let __writer = new BinaryWriter(1024);
    UpdateViewport.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_viewport", __argsBuffer, this.setCallReducerFlags.updateViewportFlags);
  }

  onUpdateViewport(callback: (ctx: ReducerEventContext, minX: number, minY: number, maxX: number, maxY: number) => void) {
    this.connection.onReducer("update_viewport", callback);
  }

  removeOnUpdateViewport(callback: (ctx: ReducerEventContext, minX: number, minY: number, maxX: number, maxY: number) => void) {
    this.connection.offReducer("update_viewport", callback);
  }

  useEquippedItem() {
    this.connection.callReducer("use_equipped_item", new Uint8Array(0), this.setCallReducerFlags.useEquippedItemFlags);
  }

  onUseEquippedItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("use_equipped_item", callback);
  }

  removeOnUseEquippedItem(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("use_equipped_item", callback);
  }

}

export class SetReducerFlags {
  addFuelToCampfireFlags: CallReducerFlags = 'FullUpdate';
  addFuelToCampfire(flags: CallReducerFlags) {
    this.addFuelToCampfireFlags = flags;
  }

  autoRemoveFuelFromCampfireFlags: CallReducerFlags = 'FullUpdate';
  autoRemoveFuelFromCampfire(flags: CallReducerFlags) {
    this.autoRemoveFuelFromCampfireFlags = flags;
  }

  cancelAllCraftingFlags: CallReducerFlags = 'FullUpdate';
  cancelAllCrafting(flags: CallReducerFlags) {
    this.cancelAllCraftingFlags = flags;
  }

  cancelCraftingItemFlags: CallReducerFlags = 'FullUpdate';
  cancelCraftingItem(flags: CallReducerFlags) {
    this.cancelCraftingItemFlags = flags;
  }

  cancelFishingFlags: CallReducerFlags = 'FullUpdate';
  cancelFishing(flags: CallReducerFlags) {
    this.cancelFishingFlags = flags;
  }

  castFishingLineFlags: CallReducerFlags = 'FullUpdate';
  castFishingLine(flags: CallReducerFlags) {
    this.castFishingLineFlags = flags;
  }

  checkFinishedCraftingFlags: CallReducerFlags = 'FullUpdate';
  checkFinishedCrafting(flags: CallReducerFlags) {
    this.checkFinishedCraftingFlags = flags;
  }

  checkResourceRespawnsFlags: CallReducerFlags = 'FullUpdate';
  checkResourceRespawns(flags: CallReducerFlags) {
    this.checkResourceRespawnsFlags = flags;
  }

  clearActiveItemReducerFlags: CallReducerFlags = 'FullUpdate';
  clearActiveItemReducer(flags: CallReducerFlags) {
    this.clearActiveItemReducerFlags = flags;
  }

  consumeItemFlags: CallReducerFlags = 'FullUpdate';
  consumeItem(flags: CallReducerFlags) {
    this.consumeItemFlags = flags;
  }

  crushBoneItemFlags: CallReducerFlags = 'FullUpdate';
  crushBoneItem(flags: CallReducerFlags) {
    this.crushBoneItemFlags = flags;
  }

  despawnExpiredItemsFlags: CallReducerFlags = 'FullUpdate';
  despawnExpiredItems(flags: CallReducerFlags) {
    this.despawnExpiredItemsFlags = flags;
  }

  dodgeRollFlags: CallReducerFlags = 'FullUpdate';
  dodgeRoll(flags: CallReducerFlags) {
    this.dodgeRollFlags = flags;
  }

  dropItemFlags: CallReducerFlags = 'FullUpdate';
  dropItem(flags: CallReducerFlags) {
    this.dropItemFlags = flags;
  }

  dropItemFromBoxSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  dropItemFromBoxSlotToWorld(flags: CallReducerFlags) {
    this.dropItemFromBoxSlotToWorldFlags = flags;
  }

  dropItemFromCampfireSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  dropItemFromCampfireSlotToWorld(flags: CallReducerFlags) {
    this.dropItemFromCampfireSlotToWorldFlags = flags;
  }

  dropItemFromCorpseSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  dropItemFromCorpseSlotToWorld(flags: CallReducerFlags) {
    this.dropItemFromCorpseSlotToWorldFlags = flags;
  }

  dropItemFromStashSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  dropItemFromStashSlotToWorld(flags: CallReducerFlags) {
    this.dropItemFromStashSlotToWorldFlags = flags;
  }

  equipArmorFlags: CallReducerFlags = 'FullUpdate';
  equipArmor(flags: CallReducerFlags) {
    this.equipArmorFlags = flags;
  }

  equipArmorFromDragFlags: CallReducerFlags = 'FullUpdate';
  equipArmorFromDrag(flags: CallReducerFlags) {
    this.equipArmorFromDragFlags = flags;
  }

  equipArmorFromInventoryFlags: CallReducerFlags = 'FullUpdate';
  equipArmorFromInventory(flags: CallReducerFlags) {
    this.equipArmorFromInventoryFlags = flags;
  }

  finishFishingFlags: CallReducerFlags = 'FullUpdate';
  finishFishing(flags: CallReducerFlags) {
    this.finishFishingFlags = flags;
  }

  fireProjectileFlags: CallReducerFlags = 'FullUpdate';
  fireProjectile(flags: CallReducerFlags) {
    this.fireProjectileFlags = flags;
  }

  generateDefaultWorldFlags: CallReducerFlags = 'FullUpdate';
  generateDefaultWorld(flags: CallReducerFlags) {
    this.generateDefaultWorldFlags = flags;
  }

  generateMinimapDataFlags: CallReducerFlags = 'FullUpdate';
  generateMinimapData(flags: CallReducerFlags) {
    this.generateMinimapDataFlags = flags;
  }

  generateWorldFlags: CallReducerFlags = 'FullUpdate';
  generateWorld(flags: CallReducerFlags) {
    this.generateWorldFlags = flags;
  }

  getKnockedOutStatusFlags: CallReducerFlags = 'FullUpdate';
  getKnockedOutStatus(flags: CallReducerFlags) {
    this.getKnockedOutStatusFlags = flags;
  }

  getMinimapDataFlags: CallReducerFlags = 'FullUpdate';
  getMinimapData(flags: CallReducerFlags) {
    this.getMinimapDataFlags = flags;
  }

  initProjectileSystemFlags: CallReducerFlags = 'FullUpdate';
  initProjectileSystem(flags: CallReducerFlags) {
    this.initProjectileSystemFlags = flags;
  }

  interactWithCampfireFlags: CallReducerFlags = 'FullUpdate';
  interactWithCampfire(flags: CallReducerFlags) {
    this.interactWithCampfireFlags = flags;
  }

  interactWithCornFlags: CallReducerFlags = 'FullUpdate';
  interactWithCorn(flags: CallReducerFlags) {
    this.interactWithCornFlags = flags;
  }

  interactWithHempFlags: CallReducerFlags = 'FullUpdate';
  interactWithHemp(flags: CallReducerFlags) {
    this.interactWithHempFlags = flags;
  }

  interactWithMushroomFlags: CallReducerFlags = 'FullUpdate';
  interactWithMushroom(flags: CallReducerFlags) {
    this.interactWithMushroomFlags = flags;
  }

  interactWithPotatoFlags: CallReducerFlags = 'FullUpdate';
  interactWithPotato(flags: CallReducerFlags) {
    this.interactWithPotatoFlags = flags;
  }

  interactWithPumpkinFlags: CallReducerFlags = 'FullUpdate';
  interactWithPumpkin(flags: CallReducerFlags) {
    this.interactWithPumpkinFlags = flags;
  }

  interactWithSleepingBagFlags: CallReducerFlags = 'FullUpdate';
  interactWithSleepingBag(flags: CallReducerFlags) {
    this.interactWithSleepingBagFlags = flags;
  }

  interactWithStorageBoxFlags: CallReducerFlags = 'FullUpdate';
  interactWithStorageBox(flags: CallReducerFlags) {
    this.interactWithStorageBoxFlags = flags;
  }

  jumpFlags: CallReducerFlags = 'FullUpdate';
  jump(flags: CallReducerFlags) {
    this.jumpFlags = flags;
  }

  loadRangedWeaponFlags: CallReducerFlags = 'FullUpdate';
  loadRangedWeapon(flags: CallReducerFlags) {
    this.loadRangedWeaponFlags = flags;
  }

  moveFuelItemToPlayerSlotFlags: CallReducerFlags = 'FullUpdate';
  moveFuelItemToPlayerSlot(flags: CallReducerFlags) {
    this.moveFuelItemToPlayerSlotFlags = flags;
  }

  moveFuelWithinCampfireFlags: CallReducerFlags = 'FullUpdate';
  moveFuelWithinCampfire(flags: CallReducerFlags) {
    this.moveFuelWithinCampfireFlags = flags;
  }

  moveItemFromBoxFlags: CallReducerFlags = 'FullUpdate';
  moveItemFromBox(flags: CallReducerFlags) {
    this.moveItemFromBoxFlags = flags;
  }

  moveItemFromCorpseFlags: CallReducerFlags = 'FullUpdate';
  moveItemFromCorpse(flags: CallReducerFlags) {
    this.moveItemFromCorpseFlags = flags;
  }

  moveItemFromStashFlags: CallReducerFlags = 'FullUpdate';
  moveItemFromStash(flags: CallReducerFlags) {
    this.moveItemFromStashFlags = flags;
  }

  moveItemToBoxFlags: CallReducerFlags = 'FullUpdate';
  moveItemToBox(flags: CallReducerFlags) {
    this.moveItemToBoxFlags = flags;
  }

  moveItemToCorpseFlags: CallReducerFlags = 'FullUpdate';
  moveItemToCorpse(flags: CallReducerFlags) {
    this.moveItemToCorpseFlags = flags;
  }

  moveItemToHotbarFlags: CallReducerFlags = 'FullUpdate';
  moveItemToHotbar(flags: CallReducerFlags) {
    this.moveItemToHotbarFlags = flags;
  }

  moveItemToInventoryFlags: CallReducerFlags = 'FullUpdate';
  moveItemToInventory(flags: CallReducerFlags) {
    this.moveItemToInventoryFlags = flags;
  }

  moveItemToStashFlags: CallReducerFlags = 'FullUpdate';
  moveItemToStash(flags: CallReducerFlags) {
    this.moveItemToStashFlags = flags;
  }

  moveItemWithinBoxFlags: CallReducerFlags = 'FullUpdate';
  moveItemWithinBox(flags: CallReducerFlags) {
    this.moveItemWithinBoxFlags = flags;
  }

  moveItemWithinCorpseFlags: CallReducerFlags = 'FullUpdate';
  moveItemWithinCorpse(flags: CallReducerFlags) {
    this.moveItemWithinCorpseFlags = flags;
  }

  moveItemWithinStashFlags: CallReducerFlags = 'FullUpdate';
  moveItemWithinStash(flags: CallReducerFlags) {
    this.moveItemWithinStashFlags = flags;
  }

  moveToFirstAvailableHotbarSlotFlags: CallReducerFlags = 'FullUpdate';
  moveToFirstAvailableHotbarSlot(flags: CallReducerFlags) {
    this.moveToFirstAvailableHotbarSlotFlags = flags;
  }

  pickupDroppedItemFlags: CallReducerFlags = 'FullUpdate';
  pickupDroppedItem(flags: CallReducerFlags) {
    this.pickupDroppedItemFlags = flags;
  }

  pickupStorageBoxFlags: CallReducerFlags = 'FullUpdate';
  pickupStorageBox(flags: CallReducerFlags) {
    this.pickupStorageBoxFlags = flags;
  }

  placeCampfireFlags: CallReducerFlags = 'FullUpdate';
  placeCampfire(flags: CallReducerFlags) {
    this.placeCampfireFlags = flags;
  }

  placeShelterFlags: CallReducerFlags = 'FullUpdate';
  placeShelter(flags: CallReducerFlags) {
    this.placeShelterFlags = flags;
  }

  placeSleepingBagFlags: CallReducerFlags = 'FullUpdate';
  placeSleepingBag(flags: CallReducerFlags) {
    this.placeSleepingBagFlags = flags;
  }

  placeStashFlags: CallReducerFlags = 'FullUpdate';
  placeStash(flags: CallReducerFlags) {
    this.placeStashFlags = flags;
  }

  placeWoodenStorageBoxFlags: CallReducerFlags = 'FullUpdate';
  placeWoodenStorageBox(flags: CallReducerFlags) {
    this.placeWoodenStorageBoxFlags = flags;
  }

  processActiveConsumableEffectsTickFlags: CallReducerFlags = 'FullUpdate';
  processActiveConsumableEffectsTick(flags: CallReducerFlags) {
    this.processActiveConsumableEffectsTickFlags = flags;
  }

  processCampfireLogicScheduledFlags: CallReducerFlags = 'FullUpdate';
  processCampfireLogicScheduled(flags: CallReducerFlags) {
    this.processCampfireLogicScheduledFlags = flags;
  }

  processCorpseDespawnFlags: CallReducerFlags = 'FullUpdate';
  processCorpseDespawn(flags: CallReducerFlags) {
    this.processCorpseDespawnFlags = flags;
  }

  processGlobalTickFlags: CallReducerFlags = 'FullUpdate';
  processGlobalTick(flags: CallReducerFlags) {
    this.processGlobalTickFlags = flags;
  }

  processGrassRespawnFlags: CallReducerFlags = 'FullUpdate';
  processGrassRespawn(flags: CallReducerFlags) {
    this.processGrassRespawnFlags = flags;
  }

  processKnockedOutRecoveryFlags: CallReducerFlags = 'FullUpdate';
  processKnockedOutRecovery(flags: CallReducerFlags) {
    this.processKnockedOutRecoveryFlags = flags;
  }

  processPlayerStatsFlags: CallReducerFlags = 'FullUpdate';
  processPlayerStats(flags: CallReducerFlags) {
    this.processPlayerStatsFlags = flags;
  }

  quickMoveFromBoxFlags: CallReducerFlags = 'FullUpdate';
  quickMoveFromBox(flags: CallReducerFlags) {
    this.quickMoveFromBoxFlags = flags;
  }

  quickMoveFromCorpseFlags: CallReducerFlags = 'FullUpdate';
  quickMoveFromCorpse(flags: CallReducerFlags) {
    this.quickMoveFromCorpseFlags = flags;
  }

  quickMoveFromStashFlags: CallReducerFlags = 'FullUpdate';
  quickMoveFromStash(flags: CallReducerFlags) {
    this.quickMoveFromStashFlags = flags;
  }

  quickMoveToBoxFlags: CallReducerFlags = 'FullUpdate';
  quickMoveToBox(flags: CallReducerFlags) {
    this.quickMoveToBoxFlags = flags;
  }

  quickMoveToCampfireFlags: CallReducerFlags = 'FullUpdate';
  quickMoveToCampfire(flags: CallReducerFlags) {
    this.quickMoveToCampfireFlags = flags;
  }

  quickMoveToCorpseFlags: CallReducerFlags = 'FullUpdate';
  quickMoveToCorpse(flags: CallReducerFlags) {
    this.quickMoveToCorpseFlags = flags;
  }

  quickMoveToStashFlags: CallReducerFlags = 'FullUpdate';
  quickMoveToStash(flags: CallReducerFlags) {
    this.quickMoveToStashFlags = flags;
  }

  regenerateCompressedChunksFlags: CallReducerFlags = 'FullUpdate';
  regenerateCompressedChunks(flags: CallReducerFlags) {
    this.regenerateCompressedChunksFlags = flags;
  }

  registerPlayerFlags: CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  respawnAtSleepingBagFlags: CallReducerFlags = 'FullUpdate';
  respawnAtSleepingBag(flags: CallReducerFlags) {
    this.respawnAtSleepingBagFlags = flags;
  }

  respawnRandomlyFlags: CallReducerFlags = 'FullUpdate';
  respawnRandomly(flags: CallReducerFlags) {
    this.respawnRandomlyFlags = flags;
  }

  reviveKnockedOutPlayerFlags: CallReducerFlags = 'FullUpdate';
  reviveKnockedOutPlayer(flags: CallReducerFlags) {
    this.reviveKnockedOutPlayerFlags = flags;
  }

  scheduleNextCampfireProcessingFlags: CallReducerFlags = 'FullUpdate';
  scheduleNextCampfireProcessing(flags: CallReducerFlags) {
    this.scheduleNextCampfireProcessingFlags = flags;
  }

  seedEnvironmentFlags: CallReducerFlags = 'FullUpdate';
  seedEnvironment(flags: CallReducerFlags) {
    this.seedEnvironmentFlags = flags;
  }

  seedItemsFlags: CallReducerFlags = 'FullUpdate';
  seedItems(flags: CallReducerFlags) {
    this.seedItemsFlags = flags;
  }

  seedRangedWeaponStatsFlags: CallReducerFlags = 'FullUpdate';
  seedRangedWeaponStats(flags: CallReducerFlags) {
    this.seedRangedWeaponStatsFlags = flags;
  }

  seedRecipesFlags: CallReducerFlags = 'FullUpdate';
  seedRecipes(flags: CallReducerFlags) {
    this.seedRecipesFlags = flags;
  }

  seedWorldStateFlags: CallReducerFlags = 'FullUpdate';
  seedWorldState(flags: CallReducerFlags) {
    this.seedWorldStateFlags = flags;
  }

  sendMessageFlags: CallReducerFlags = 'FullUpdate';
  sendMessage(flags: CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setActiveItemReducerFlags: CallReducerFlags = 'FullUpdate';
  setActiveItemReducer(flags: CallReducerFlags) {
    this.setActiveItemReducerFlags = flags;
  }

  setPlayerPinFlags: CallReducerFlags = 'FullUpdate';
  setPlayerPin(flags: CallReducerFlags) {
    this.setPlayerPinFlags = flags;
  }

  setSprintingFlags: CallReducerFlags = 'FullUpdate';
  setSprinting(flags: CallReducerFlags) {
    this.setSprintingFlags = flags;
  }

  splitAndDropItemFromBoxSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  splitAndDropItemFromBoxSlotToWorld(flags: CallReducerFlags) {
    this.splitAndDropItemFromBoxSlotToWorldFlags = flags;
  }

  splitAndDropItemFromCampfireSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  splitAndDropItemFromCampfireSlotToWorld(flags: CallReducerFlags) {
    this.splitAndDropItemFromCampfireSlotToWorldFlags = flags;
  }

  splitAndDropItemFromCorpseSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  splitAndDropItemFromCorpseSlotToWorld(flags: CallReducerFlags) {
    this.splitAndDropItemFromCorpseSlotToWorldFlags = flags;
  }

  splitAndDropItemFromStashSlotToWorldFlags: CallReducerFlags = 'FullUpdate';
  splitAndDropItemFromStashSlotToWorld(flags: CallReducerFlags) {
    this.splitAndDropItemFromStashSlotToWorldFlags = flags;
  }

  splitAndMoveFromCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitAndMoveFromCampfire(flags: CallReducerFlags) {
    this.splitAndMoveFromCampfireFlags = flags;
  }

  splitStackFlags: CallReducerFlags = 'FullUpdate';
  splitStack(flags: CallReducerFlags) {
    this.splitStackFlags = flags;
  }

  splitStackFromBoxFlags: CallReducerFlags = 'FullUpdate';
  splitStackFromBox(flags: CallReducerFlags) {
    this.splitStackFromBoxFlags = flags;
  }

  splitStackFromCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackFromCampfire(flags: CallReducerFlags) {
    this.splitStackFromCampfireFlags = flags;
  }

  splitStackFromCorpseFlags: CallReducerFlags = 'FullUpdate';
  splitStackFromCorpse(flags: CallReducerFlags) {
    this.splitStackFromCorpseFlags = flags;
  }

  splitStackFromStashFlags: CallReducerFlags = 'FullUpdate';
  splitStackFromStash(flags: CallReducerFlags) {
    this.splitStackFromStashFlags = flags;
  }

  splitStackIntoBoxFlags: CallReducerFlags = 'FullUpdate';
  splitStackIntoBox(flags: CallReducerFlags) {
    this.splitStackIntoBoxFlags = flags;
  }

  splitStackIntoCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackIntoCampfire(flags: CallReducerFlags) {
    this.splitStackIntoCampfireFlags = flags;
  }

  splitStackIntoCorpseFlags: CallReducerFlags = 'FullUpdate';
  splitStackIntoCorpse(flags: CallReducerFlags) {
    this.splitStackIntoCorpseFlags = flags;
  }

  splitStackIntoStashFlags: CallReducerFlags = 'FullUpdate';
  splitStackIntoStash(flags: CallReducerFlags) {
    this.splitStackIntoStashFlags = flags;
  }

  splitStackWithinBoxFlags: CallReducerFlags = 'FullUpdate';
  splitStackWithinBox(flags: CallReducerFlags) {
    this.splitStackWithinBoxFlags = flags;
  }

  splitStackWithinCampfireFlags: CallReducerFlags = 'FullUpdate';
  splitStackWithinCampfire(flags: CallReducerFlags) {
    this.splitStackWithinCampfireFlags = flags;
  }

  splitStackWithinCorpseFlags: CallReducerFlags = 'FullUpdate';
  splitStackWithinCorpse(flags: CallReducerFlags) {
    this.splitStackWithinCorpseFlags = flags;
  }

  splitStackWithinStashFlags: CallReducerFlags = 'FullUpdate';
  splitStackWithinStash(flags: CallReducerFlags) {
    this.splitStackWithinStashFlags = flags;
  }

  startCraftingFlags: CallReducerFlags = 'FullUpdate';
  startCrafting(flags: CallReducerFlags) {
    this.startCraftingFlags = flags;
  }

  startCraftingMultipleFlags: CallReducerFlags = 'FullUpdate';
  startCraftingMultiple(flags: CallReducerFlags) {
    this.startCraftingMultipleFlags = flags;
  }

  throwItemFlags: CallReducerFlags = 'FullUpdate';
  throwItem(flags: CallReducerFlags) {
    this.throwItemFlags = flags;
  }

  tickWorldStateFlags: CallReducerFlags = 'FullUpdate';
  tickWorldState(flags: CallReducerFlags) {
    this.tickWorldStateFlags = flags;
  }

  toggleCampfireBurningFlags: CallReducerFlags = 'FullUpdate';
  toggleCampfireBurning(flags: CallReducerFlags) {
    this.toggleCampfireBurningFlags = flags;
  }

  toggleCrouchFlags: CallReducerFlags = 'FullUpdate';
  toggleCrouch(flags: CallReducerFlags) {
    this.toggleCrouchFlags = flags;
  }

  toggleStashVisibilityFlags: CallReducerFlags = 'FullUpdate';
  toggleStashVisibility(flags: CallReducerFlags) {
    this.toggleStashVisibilityFlags = flags;
  }

  toggleTorchFlags: CallReducerFlags = 'FullUpdate';
  toggleTorch(flags: CallReducerFlags) {
    this.toggleTorchFlags = flags;
  }

  updateCloudPositionsFlags: CallReducerFlags = 'FullUpdate';
  updateCloudPositions(flags: CallReducerFlags) {
    this.updateCloudPositionsFlags = flags;
  }

  updatePlayerFacingDirectionFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerFacingDirection(flags: CallReducerFlags) {
    this.updatePlayerFacingDirectionFlags = flags;
  }

  updatePlayerPositionSimpleFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerPositionSimple(flags: CallReducerFlags) {
    this.updatePlayerPositionSimpleFlags = flags;
  }

  updateProjectilesFlags: CallReducerFlags = 'FullUpdate';
  updateProjectiles(flags: CallReducerFlags) {
    this.updateProjectilesFlags = flags;
  }

  updateViewportFlags: CallReducerFlags = 'FullUpdate';
  updateViewport(flags: CallReducerFlags) {
    this.updateViewportFlags = flags;
  }

  useEquippedItemFlags: CallReducerFlags = 'FullUpdate';
  useEquippedItem(flags: CallReducerFlags) {
    this.useEquippedItemFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get activeConnection(): ActiveConnectionTableHandle {
    return new ActiveConnectionTableHandle(this.connection.clientCache.getOrCreateTable<ActiveConnection>(REMOTE_MODULE.tables.active_connection));
  }

  get activeConsumableEffect(): ActiveConsumableEffectTableHandle {
    return new ActiveConsumableEffectTableHandle(this.connection.clientCache.getOrCreateTable<ActiveConsumableEffect>(REMOTE_MODULE.tables.active_consumable_effect));
  }

  get activeEquipment(): ActiveEquipmentTableHandle {
    return new ActiveEquipmentTableHandle(this.connection.clientCache.getOrCreateTable<ActiveEquipment>(REMOTE_MODULE.tables.active_equipment));
  }

  get arrowBreakEvent(): ArrowBreakEventTableHandle {
    return new ArrowBreakEventTableHandle(this.connection.clientCache.getOrCreateTable<ArrowBreakEvent>(REMOTE_MODULE.tables.arrow_break_event));
  }

  get campfire(): CampfireTableHandle {
    return new CampfireTableHandle(this.connection.clientCache.getOrCreateTable<Campfire>(REMOTE_MODULE.tables.campfire));
  }

  get campfireProcessingSchedule(): CampfireProcessingScheduleTableHandle {
    return new CampfireProcessingScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CampfireProcessingSchedule>(REMOTE_MODULE.tables.campfire_processing_schedule));
  }

  get clientViewport(): ClientViewportTableHandle {
    return new ClientViewportTableHandle(this.connection.clientCache.getOrCreateTable<ClientViewport>(REMOTE_MODULE.tables.client_viewport));
  }

  get cloud(): CloudTableHandle {
    return new CloudTableHandle(this.connection.clientCache.getOrCreateTable<Cloud>(REMOTE_MODULE.tables.cloud));
  }

  get cloudUpdateSchedule(): CloudUpdateScheduleTableHandle {
    return new CloudUpdateScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CloudUpdateSchedule>(REMOTE_MODULE.tables.cloud_update_schedule));
  }

  get corn(): CornTableHandle {
    return new CornTableHandle(this.connection.clientCache.getOrCreateTable<Corn>(REMOTE_MODULE.tables.corn));
  }

  get craftingFinishSchedule(): CraftingFinishScheduleTableHandle {
    return new CraftingFinishScheduleTableHandle(this.connection.clientCache.getOrCreateTable<CraftingFinishSchedule>(REMOTE_MODULE.tables.crafting_finish_schedule));
  }

  get craftingQueueItem(): CraftingQueueItemTableHandle {
    return new CraftingQueueItemTableHandle(this.connection.clientCache.getOrCreateTable<CraftingQueueItem>(REMOTE_MODULE.tables.crafting_queue_item));
  }

  get deathMarker(): DeathMarkerTableHandle {
    return new DeathMarkerTableHandle(this.connection.clientCache.getOrCreateTable<DeathMarker>(REMOTE_MODULE.tables.death_marker));
  }

  get droppedItem(): DroppedItemTableHandle {
    return new DroppedItemTableHandle(this.connection.clientCache.getOrCreateTable<DroppedItem>(REMOTE_MODULE.tables.dropped_item));
  }

  get droppedItemDespawnSchedule(): DroppedItemDespawnScheduleTableHandle {
    return new DroppedItemDespawnScheduleTableHandle(this.connection.clientCache.getOrCreateTable<DroppedItemDespawnSchedule>(REMOTE_MODULE.tables.dropped_item_despawn_schedule));
  }

  get fishingSession(): FishingSessionTableHandle {
    return new FishingSessionTableHandle(this.connection.clientCache.getOrCreateTable<FishingSession>(REMOTE_MODULE.tables.fishing_session));
  }

  get globalTickSchedule(): GlobalTickScheduleTableHandle {
    return new GlobalTickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<GlobalTickSchedule>(REMOTE_MODULE.tables.global_tick_schedule));
  }

  get grass(): GrassTableHandle {
    return new GrassTableHandle(this.connection.clientCache.getOrCreateTable<Grass>(REMOTE_MODULE.tables.grass));
  }

  get grassRespawnSchedule(): GrassRespawnScheduleTableHandle {
    return new GrassRespawnScheduleTableHandle(this.connection.clientCache.getOrCreateTable<GrassRespawnSchedule>(REMOTE_MODULE.tables.grass_respawn_schedule));
  }

  get hemp(): HempTableHandle {
    return new HempTableHandle(this.connection.clientCache.getOrCreateTable<Hemp>(REMOTE_MODULE.tables.hemp));
  }

  get inventoryItem(): InventoryItemTableHandle {
    return new InventoryItemTableHandle(this.connection.clientCache.getOrCreateTable<InventoryItem>(REMOTE_MODULE.tables.inventory_item));
  }

  get itemDefinition(): ItemDefinitionTableHandle {
    return new ItemDefinitionTableHandle(this.connection.clientCache.getOrCreateTable<ItemDefinition>(REMOTE_MODULE.tables.item_definition));
  }

  get knockedOutRecoverySchedule(): KnockedOutRecoveryScheduleTableHandle {
    return new KnockedOutRecoveryScheduleTableHandle(this.connection.clientCache.getOrCreateTable<KnockedOutRecoverySchedule>(REMOTE_MODULE.tables.knocked_out_recovery_schedule));
  }

  get knockedOutStatus(): KnockedOutStatusTableHandle {
    return new KnockedOutStatusTableHandle(this.connection.clientCache.getOrCreateTable<KnockedOutStatus>(REMOTE_MODULE.tables.knocked_out_status));
  }

  get message(): MessageTableHandle {
    return new MessageTableHandle(this.connection.clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get minimapCache(): MinimapCacheTableHandle {
    return new MinimapCacheTableHandle(this.connection.clientCache.getOrCreateTable<MinimapCache>(REMOTE_MODULE.tables.minimap_cache));
  }

  get mushroom(): MushroomTableHandle {
    return new MushroomTableHandle(this.connection.clientCache.getOrCreateTable<Mushroom>(REMOTE_MODULE.tables.mushroom));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get playerCorpse(): PlayerCorpseTableHandle {
    return new PlayerCorpseTableHandle(this.connection.clientCache.getOrCreateTable<PlayerCorpse>(REMOTE_MODULE.tables.player_corpse));
  }

  get playerCorpseDespawnSchedule(): PlayerCorpseDespawnScheduleTableHandle {
    return new PlayerCorpseDespawnScheduleTableHandle(this.connection.clientCache.getOrCreateTable<PlayerCorpseDespawnSchedule>(REMOTE_MODULE.tables.player_corpse_despawn_schedule));
  }

  get playerDodgeRollState(): PlayerDodgeRollStateTableHandle {
    return new PlayerDodgeRollStateTableHandle(this.connection.clientCache.getOrCreateTable<PlayerDodgeRollState>(REMOTE_MODULE.tables.player_dodge_roll_state));
  }

  get playerKillCommandCooldown(): PlayerKillCommandCooldownTableHandle {
    return new PlayerKillCommandCooldownTableHandle(this.connection.clientCache.getOrCreateTable<PlayerKillCommandCooldown>(REMOTE_MODULE.tables.player_kill_command_cooldown));
  }

  get playerLastAttackTimestamp(): PlayerLastAttackTimestampTableHandle {
    return new PlayerLastAttackTimestampTableHandle(this.connection.clientCache.getOrCreateTable<PlayerLastAttackTimestamp>(REMOTE_MODULE.tables.player_last_attack_timestamp));
  }

  get playerPin(): PlayerPinTableHandle {
    return new PlayerPinTableHandle(this.connection.clientCache.getOrCreateTable<PlayerPin>(REMOTE_MODULE.tables.player_pin));
  }

  get playerStatSchedule(): PlayerStatScheduleTableHandle {
    return new PlayerStatScheduleTableHandle(this.connection.clientCache.getOrCreateTable<PlayerStatSchedule>(REMOTE_MODULE.tables.player_stat_schedule));
  }

  get potato(): PotatoTableHandle {
    return new PotatoTableHandle(this.connection.clientCache.getOrCreateTable<Potato>(REMOTE_MODULE.tables.potato));
  }

  get privateMessage(): PrivateMessageTableHandle {
    return new PrivateMessageTableHandle(this.connection.clientCache.getOrCreateTable<PrivateMessage>(REMOTE_MODULE.tables.private_message));
  }

  get processEffectsSchedule(): ProcessEffectsScheduleTableHandle {
    return new ProcessEffectsScheduleTableHandle(this.connection.clientCache.getOrCreateTable<ProcessEffectsSchedule>(REMOTE_MODULE.tables.process_effects_schedule));
  }

  get projectile(): ProjectileTableHandle {
    return new ProjectileTableHandle(this.connection.clientCache.getOrCreateTable<Projectile>(REMOTE_MODULE.tables.projectile));
  }

  get projectileUpdateSchedule(): ProjectileUpdateScheduleTableHandle {
    return new ProjectileUpdateScheduleTableHandle(this.connection.clientCache.getOrCreateTable<ProjectileUpdateSchedule>(REMOTE_MODULE.tables.projectile_update_schedule));
  }

  get pumpkin(): PumpkinTableHandle {
    return new PumpkinTableHandle(this.connection.clientCache.getOrCreateTable<Pumpkin>(REMOTE_MODULE.tables.pumpkin));
  }

  get rangedWeaponStats(): RangedWeaponStatsTableHandle {
    return new RangedWeaponStatsTableHandle(this.connection.clientCache.getOrCreateTable<RangedWeaponStats>(REMOTE_MODULE.tables.ranged_weapon_stats));
  }

  get recipe(): RecipeTableHandle {
    return new RecipeTableHandle(this.connection.clientCache.getOrCreateTable<Recipe>(REMOTE_MODULE.tables.recipe));
  }

  get shelter(): ShelterTableHandle {
    return new ShelterTableHandle(this.connection.clientCache.getOrCreateTable<Shelter>(REMOTE_MODULE.tables.shelter));
  }

  get sleepingBag(): SleepingBagTableHandle {
    return new SleepingBagTableHandle(this.connection.clientCache.getOrCreateTable<SleepingBag>(REMOTE_MODULE.tables.sleeping_bag));
  }

  get stash(): StashTableHandle {
    return new StashTableHandle(this.connection.clientCache.getOrCreateTable<Stash>(REMOTE_MODULE.tables.stash));
  }

  get statThresholdsConfig(): StatThresholdsConfigTableHandle {
    return new StatThresholdsConfigTableHandle(this.connection.clientCache.getOrCreateTable<StatThresholdsConfig>(REMOTE_MODULE.tables.stat_thresholds_config));
  }

  get stone(): StoneTableHandle {
    return new StoneTableHandle(this.connection.clientCache.getOrCreateTable<Stone>(REMOTE_MODULE.tables.stone));
  }

  get thunderEvent(): ThunderEventTableHandle {
    return new ThunderEventTableHandle(this.connection.clientCache.getOrCreateTable<ThunderEvent>(REMOTE_MODULE.tables.thunder_event));
  }

  get tree(): TreeTableHandle {
    return new TreeTableHandle(this.connection.clientCache.getOrCreateTable<Tree>(REMOTE_MODULE.tables.tree));
  }

  get woodenStorageBox(): WoodenStorageBoxTableHandle {
    return new WoodenStorageBoxTableHandle(this.connection.clientCache.getOrCreateTable<WoodenStorageBox>(REMOTE_MODULE.tables.wooden_storage_box));
  }

  get worldChunkData(): WorldChunkDataTableHandle {
    return new WorldChunkDataTableHandle(this.connection.clientCache.getOrCreateTable<WorldChunkData>(REMOTE_MODULE.tables.world_chunk_data));
  }

  get worldState(): WorldStateTableHandle {
    return new WorldStateTableHandle(this.connection.clientCache.getOrCreateTable<WorldState>(REMOTE_MODULE.tables.world_state));
  }

  get worldTile(): WorldTileTableHandle {
    return new WorldTileTableHandle(this.connection.clientCache.getOrCreateTable<WorldTile>(REMOTE_MODULE.tables.world_tile));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
