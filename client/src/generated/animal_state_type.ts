// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace AnimalState {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type Patrolling = { tag: "Patrolling" };
  export type Chasing = { tag: "Chasing" };
  export type Attacking = { tag: "Attacking" };
  export type Fleeing = { tag: "Fleeing" };
  export type Hiding = { tag: "Hiding" };
  export type Burrowed = { tag: "Burrowed" };
  export type Investigating = { tag: "Investigating" };
  export type Alert = { tag: "Alert" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const Patrolling = { tag: "Patrolling" };
  export const Chasing = { tag: "Chasing" };
  export const Attacking = { tag: "Attacking" };
  export const Fleeing = { tag: "Fleeing" };
  export const Hiding = { tag: "Hiding" };
  export const Burrowed = { tag: "Burrowed" };
  export const Investigating = { tag: "Investigating" };
  export const Alert = { tag: "Alert" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("Patrolling", AlgebraicType.createProductType([])),
      new SumTypeVariant("Chasing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Attacking", AlgebraicType.createProductType([])),
      new SumTypeVariant("Fleeing", AlgebraicType.createProductType([])),
      new SumTypeVariant("Hiding", AlgebraicType.createProductType([])),
      new SumTypeVariant("Burrowed", AlgebraicType.createProductType([])),
      new SumTypeVariant("Investigating", AlgebraicType.createProductType([])),
      new SumTypeVariant("Alert", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: AnimalState): void {
      AnimalState.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): AnimalState {
      return AnimalState.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `AnimalState`.
export type AnimalState = AnimalState.Patrolling | AnimalState.Chasing | AnimalState.Attacking | AnimalState.Fleeing | AnimalState.Hiding | AnimalState.Burrowed | AnimalState.Investigating | AnimalState.Alert;

export default AnimalState;

