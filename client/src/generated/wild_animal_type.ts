// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
import { AnimalSpecies as __AnimalSpecies } from "./animal_species_type";
import { AnimalState as __AnimalState } from "./animal_state_type";
import { MovementPattern as __MovementPattern } from "./movement_pattern_type";

export type WildAnimal = {
  id: bigint,
  species: __AnimalSpecies,
  posX: number,
  posY: number,
  directionX: number,
  directionY: number,
  facingDirection: string,
  state: __AnimalState,
  health: number,
  spawnX: number,
  spawnY: number,
  targetPlayerId: Identity | undefined,
  lastAttackTime: Timestamp | undefined,
  stateChangeTime: Timestamp,
  hideUntil: Timestamp | undefined,
  investigationX: number | undefined,
  investigationY: number | undefined,
  patrolPhase: number,
  scentPingTimer: bigint,
  movementPattern: __MovementPattern,
  chunkIndex: number,
  createdAt: Timestamp,
  lastHitTime: Timestamp | undefined,
};

/**
 * A namespace for generated helper functions.
 */
export namespace WildAnimal {
  /**
  * A function which returns this type represented as an AlgebraicType.
  * This function is derived from the AlgebraicType used to generate this type.
  */
  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createProductType([
      new ProductTypeElement("id", AlgebraicType.createU64Type()),
      new ProductTypeElement("species", __AnimalSpecies.getTypeScriptAlgebraicType()),
      new ProductTypeElement("posX", AlgebraicType.createF32Type()),
      new ProductTypeElement("posY", AlgebraicType.createF32Type()),
      new ProductTypeElement("directionX", AlgebraicType.createF32Type()),
      new ProductTypeElement("directionY", AlgebraicType.createF32Type()),
      new ProductTypeElement("facingDirection", AlgebraicType.createStringType()),
      new ProductTypeElement("state", __AnimalState.getTypeScriptAlgebraicType()),
      new ProductTypeElement("health", AlgebraicType.createF32Type()),
      new ProductTypeElement("spawnX", AlgebraicType.createF32Type()),
      new ProductTypeElement("spawnY", AlgebraicType.createF32Type()),
      new ProductTypeElement("targetPlayerId", AlgebraicType.createOptionType(AlgebraicType.createIdentityType())),
      new ProductTypeElement("lastAttackTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("stateChangeTime", AlgebraicType.createTimestampType()),
      new ProductTypeElement("hideUntil", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
      new ProductTypeElement("investigationX", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("investigationY", AlgebraicType.createOptionType(AlgebraicType.createF32Type())),
      new ProductTypeElement("patrolPhase", AlgebraicType.createF32Type()),
      new ProductTypeElement("scentPingTimer", AlgebraicType.createU64Type()),
      new ProductTypeElement("movementPattern", __MovementPattern.getTypeScriptAlgebraicType()),
      new ProductTypeElement("chunkIndex", AlgebraicType.createU32Type()),
      new ProductTypeElement("createdAt", AlgebraicType.createTimestampType()),
      new ProductTypeElement("lastHitTime", AlgebraicType.createOptionType(AlgebraicType.createTimestampType())),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: WildAnimal): void {
    WildAnimal.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): WildAnimal {
    return WildAnimal.getTypeScriptAlgebraicType().deserialize(reader);
  }

}


