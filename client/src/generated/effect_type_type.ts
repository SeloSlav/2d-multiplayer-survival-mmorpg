// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";
// A namespace for generated variants and helper functions.
export namespace EffectType {
  // These are the generated variant types for each variant of the tagged union.
  // One type is generated per variant and will be used in the `value` field of
  // the tagged union.
  export type HealthRegen = { tag: "HealthRegen" };
  export type Burn = { tag: "Burn" };
  export type Bleed = { tag: "Bleed" };
  export type BandageBurst = { tag: "BandageBurst" };
  export type RemoteBandageBurst = { tag: "RemoteBandageBurst" };
  export type SeawaterPoisoning = { tag: "SeawaterPoisoning" };
  export type FoodPoisoning = { tag: "FoodPoisoning" };
  export type Cozy = { tag: "Cozy" };

  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  export const HealthRegen = { tag: "HealthRegen" };
  export const Burn = { tag: "Burn" };
  export const Bleed = { tag: "Bleed" };
  export const BandageBurst = { tag: "BandageBurst" };
  export const RemoteBandageBurst = { tag: "RemoteBandageBurst" };
  export const SeawaterPoisoning = { tag: "SeawaterPoisoning" };
  export const FoodPoisoning = { tag: "FoodPoisoning" };
  export const Cozy = { tag: "Cozy" };

  export function getTypeScriptAlgebraicType(): AlgebraicType {
    return AlgebraicType.createSumType([
      new SumTypeVariant("HealthRegen", AlgebraicType.createProductType([])),
      new SumTypeVariant("Burn", AlgebraicType.createProductType([])),
      new SumTypeVariant("Bleed", AlgebraicType.createProductType([])),
      new SumTypeVariant("BandageBurst", AlgebraicType.createProductType([])),
      new SumTypeVariant("RemoteBandageBurst", AlgebraicType.createProductType([])),
      new SumTypeVariant("SeawaterPoisoning", AlgebraicType.createProductType([])),
      new SumTypeVariant("FoodPoisoning", AlgebraicType.createProductType([])),
      new SumTypeVariant("Cozy", AlgebraicType.createProductType([])),
    ]);
  }

  export function serialize(writer: BinaryWriter, value: EffectType): void {
      EffectType.getTypeScriptAlgebraicType().serialize(writer, value);
  }

  export function deserialize(reader: BinaryReader): EffectType {
      return EffectType.getTypeScriptAlgebraicType().deserialize(reader);
  }

}

// The tagged union or sum type for the algebraic type `EffectType`.
export type EffectType = EffectType.HealthRegen | EffectType.Burn | EffectType.Bleed | EffectType.BandageBurst | EffectType.RemoteBandageBurst | EffectType.SeawaterPoisoning | EffectType.FoodPoisoning | EffectType.Cozy;

export default EffectType;

